Index: lib/widget/home_page/room_card.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/home_page/room_card.dart b/lib/widget/home_page/room_card.dart
new file mode 100644
--- /dev/null	(date 1722943849478)
+++ b/lib/widget/home_page/room_card.dart	(date 1722943849478)
@@ -0,0 +1,106 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import '../../core/color.dart';
+import '../../model/otel_model.dart';
+
+
+class RoomCard extends StatelessWidget {
+  const RoomCard({super.key, required this.hotelModel});
+  final HotelModel hotelModel;
+  @override
+  Widget build(BuildContext context) {
+    return Container(
+      decoration: BoxDecoration(
+        borderRadius: BorderRadius.circular(50),
+        color: Colors.black,
+      ),
+      width: 72.w,
+      child: Stack(
+        children: [
+          ClipRRect(
+            borderRadius: BorderRadius.circular(50),
+            child: Image.network(
+              hotelModel.coverPhoto,
+              width: double.infinity,
+              height: double.infinity,
+              fit: BoxFit.cover,
+            ),
+          ),
+          Positioned(
+            top: 12,
+            right: 12,
+            child: Card(
+              color: ColorConstants.black,
+              child: Padding(
+                padding: 8.pAll,
+                child: Row(
+                  children: [
+                    Icon(Icons.star, color: ColorConstants.primary),
+                    Text(
+                      hotelModel.starRating.toString(),
+                      style: Get.textTheme.labelMedium!
+                          .copyWith(color: ColorConstants.primary),
+                    ),
+                  ],
+                ),
+              ),
+            ),
+          ),
+          Positioned(
+            bottom: 12,
+            left: 12,
+            child: Card(
+              color: Colors.transparent,
+              elevation: 0,
+              child: Column(
+                crossAxisAlignment: CrossAxisAlignment.start,
+                children: [
+                  Text(
+                   hotelModel.hotelName,
+                    style: Get.textTheme.bodySmall!.copyWith(
+                        color: ColorConstants.primary,
+                        fontFamily: 'Poppins-Regular',fontWeight: FontWeight.bold),
+                  ),
+                  1.yh,
+                  Text(
+                    hotelModel.location,
+                    style: Get.textTheme.labelMedium!.copyWith(
+                        color: ColorConstants.primary,
+                        fontFamily: 'Poppins-ThinItalic'),
+                  ),
+                  RichText(
+                      text: TextSpan(children: [
+                    TextSpan(
+                      text: "\$${hotelModel.perHour}",
+                      style: Get.textTheme.labelLarge!.copyWith(
+                          color: ColorConstants.primary,
+                          fontFamily: 'Poppins-Regular',
+                          fontWeight: FontWeight.bold),
+                    ),
+                    TextSpan(
+                      text: " / per hour",
+                      style: Get.textTheme.labelMedium!.copyWith(
+                        color: ColorConstants.primary,
+                        fontFamily: 'Poppins-ThinItalic',
+                      ),
+                    ),
+                  ])),
+
+                ],
+              ),
+            ),
+          ),
+          Positioned(
+            right: 16,
+            bottom: 16,
+            child: IconButton(onPressed: (){
+            },
+                icon: const Icon(Icons.bookmark_border)),
+          )
+        ],
+      ),
+    );
+  }
+}
Index: lib/widget/home_page/room_list.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/home_page/room_list.dart b/lib/widget/home_page/room_list.dart
new file mode 100644
--- /dev/null	(date 1722950783785)
+++ b/lib/widget/home_page/room_list.dart	(date 1722950783785)
@@ -0,0 +1,51 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+import 'package:hotel/model/otel_model.dart';
+import 'package:hotel/widget/home_page/room_card.dart';
+
+import '../../controller/hotel_controller.dart';
+import '../../controller/option_controller.dart';
+
+class RoomList extends StatefulWidget {
+  const RoomList({super.key});
+
+  @override
+  State<RoomList> createState() => _RoomListState();
+}
+
+class _RoomListState extends State<RoomList> {
+  @override
+  Widget build(BuildContext context) {
+    final HotelController hotelController = Get.find();
+    final OptionsController optController = Get.find();
+
+    return Obx(() {
+      final selectedIndex = optController.selectedIndex.value;
+      List<HotelModel> listHotel=[];
+      if(selectedIndex==0){
+        listHotel=hotelController.recommendedHotels;
+      }if(selectedIndex==1){
+        listHotel= hotelController.popularHotels;
+      }else{
+        listHotel=hotelController.trendingHotels;
+      }
+      return SizedBox(
+        height: 52.h,
+        child: ListView.builder(
+          scrollDirection: Axis.horizontal,
+          shrinkWrap: true,
+          padding: 12.pAll,
+          itemCount: listHotel.length,
+          itemBuilder: (context, index) {
+            return Padding(
+              padding: 8.pH,
+              child: RoomCard(hotelModel: listHotel[index]),
+            );
+          },
+        ),
+      );
+    }
+    );
+  }
+}
Index: lib/widget/home_page/option_button.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/home_page/option_button.dart b/lib/widget/home_page/option_button.dart
new file mode 100644
--- /dev/null	(date 1722942694614)
+++ b/lib/widget/home_page/option_button.dart	(date 1722942694614)
@@ -0,0 +1,43 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+
+import '../../controller/option_controller.dart';
+import '../../core/color.dart';
+import '../../enums/options_names.dart';
+
+class OptionsButton extends StatelessWidget {
+  final int index;
+  const OptionsButton({super.key, required this.index});
+
+  @override
+  Widget build(BuildContext context) {
+    final OptionsController controller = Get.find(); // Get the controller
+
+    return Obx(() {
+      bool isSelected = controller.selectedIndex.value == index;
+      return GestureDetector(
+        onTap: () {
+          controller.selectIndex(index); // Update the selected index
+        },
+        child: Container(
+          decoration: BoxDecoration(
+            borderRadius: BorderRadius.circular(20),
+            border: Border.all(),
+            color: isSelected ? Colors.green : Colors.transparent, // Change color if selected
+          ),
+          child: Padding(
+            padding: 8.pAll,
+            child: Text(
+              OptionNames.values[index].toString().toUpperCase().split('.').last,
+              style: Get.textTheme.labelSmall!.copyWith(
+                color: ColorConstants.black,
+              ),
+            ),
+          ),
+        ),
+      );
+    });
+  }
+}
Index: lib/widget/search_page/search_bar.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/search_page/search_bar.dart b/lib/widget/search_page/search_bar.dart
new file mode 100644
--- /dev/null	(date 1722942694654)
+++ b/lib/widget/search_page/search_bar.dart	(date 1722942694654)
@@ -0,0 +1,35 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+import '../../core/color.dart';
+
+class SearchAppBar extends StatelessWidget {
+  const SearchAppBar({
+    super.key,
+  });
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: 8.pAll,
+      child: TextField(
+        cursorColor: ColorConstants.black,
+        decoration: InputDecoration(
+          fillColor: Colors.grey[300],
+          filled: true,
+          border: OutlineInputBorder(borderRadius: BorderRadius.circular(40)),
+          hintText: "Search",
+          hintStyle:
+          Get.textTheme.bodySmall!.copyWith(
+              color: ColorConstants.grey),
+          prefixIcon: Icon(
+            Icons.search,
+            size: 30,
+            color: ColorConstants.black,
+          ),
+        ),
+        style: Get.textTheme.bodySmall!.copyWith(color: ColorConstants.black),
+      ),
+    );
+  }
+}
\ No newline at end of file
Index: lib/pages/authorization/authorization.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/authorization/authorization.dart b/lib/pages/authorization/authorization.dart
new file mode 100644
--- /dev/null	(date 1722953136714)
+++ b/lib/pages/authorization/authorization.dart	(date 1722953136714)
@@ -0,0 +1,32 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/model/user_model.dart';
+import 'package:hotel/pages/main_pages/main_pages.dart';
+import 'package:hotel/pages/welcome_page/welcome_page.dart';
+import 'package:hotel/service/auth.dart';
+
+class Authorization extends StatelessWidget {
+  const Authorization({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    final AuthorizationService auth =AuthorizationService();
+    return StreamBuilder<UserModel?>(
+        stream: auth.authStatus, builder: (context,snapshot){
+          if(snapshot.connectionState==ConnectionState.waiting){
+            return const Center(
+              child: CircularProgressIndicator());
+          }else{
+            if(snapshot.hasData){
+              UserModel? activeUser=snapshot.data;
+              auth.activeUserId.value=activeUser!.id!;
+              print(auth.activeUserId);
+              return MainPages();
+            }else{
+              return WelcomePage();
+            }
+          }
+    }
+    );
+  }
+}
Index: pubspec.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.yaml b/pubspec.yaml
new file mode 100644
--- /dev/null	(date 1722943167100)
+++ b/pubspec.yaml	(date 1722943167100)
@@ -0,0 +1,102 @@
+name: hotel
+description: "A new Flutter project."
+# The following line prevents the package from being accidentally published to
+# pub.dev using `flutter pub publish`. This is preferred for private packages.
+publish_to: 'none' # Remove this line if you wish to publish to pub.dev
+
+# The following defines the version and build number for your application.
+# A version number is three numbers separated by dots, like 1.2.43
+# followed by an optional build number separated by a +.
+# Both the version and the builder number may be overridden in flutter
+# build by specifying --build-name and --build-number, respectively.
+# In Android, build-name is used as versionName while build-number used as versionCode.
+# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
+# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
+# Read more about iOS versioning at
+# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
+# In Windows, build-name is used as the major, minor, and patch parts
+# of the product and file versions while build-number is used as the build suffix.
+version: 1.0.0+1
+
+environment:
+  sdk: '>=3.4.0-220.0.dev <4.0.0'
+
+# Dependencies specify other packages that your package needs in order to work.
+# To automatically upgrade your package dependencies to the latest versions
+# consider running `flutter pub upgrade --major-versions`. Alternatively,
+# dependencies can be manually updated by changing the version numbers below to
+# the latest version available on pub.dev. To see which dependencies have newer
+# versions available, run `flutter pub outdated`.
+dependencies:
+  flutter:
+    sdk: flutter
+
+
+  # The following adds the Cupertino Icons font to your application.
+  # Use with the CupertinoIcons class for iOS style icons.
+  cupertino_icons: ^1.0.6
+  get: ^4.6.6
+  flutter_svg_provider: ^1.0.7
+  sign_in_button: ^3.2.0
+  cloud_firestore: ^5.2.0
+  firebase_core:
+  firebase_auth:
+  flutter_onboarding_slider: ^1.0.11
+
+dev_dependencies:
+  flutter_test:
+    sdk: flutter
+
+  # The "flutter_lints" package below contains a set of recommended lints to
+  # encourage good coding practices. The lint set provided by the package is
+  # activated in the `analysis_options.yaml` file located at the root of your
+  # package. See that file for information about deactivating specific lint
+  # rules and activating additional ones.
+  flutter_lints: ^3.0.0
+
+# For information on the generic Dart part of this file, see the
+# following page: https://dart.dev/tools/pub/pubspec
+
+# The following section is specific to Flutter packages.
+flutter:
+
+  # The following line ensures that the Material Icons font is
+  # included with your application, so that you can use the icons in
+  # the material Icons class.
+  uses-material-design: true
+
+  # To add assets to your application, add an assets section, like this:
+  assets:
+    - assets/images/
+    - assets/icons/
+  #   - images/a_dot_ham.jpeg
+
+  # An image asset can refer to one or more resolution-specific "variants", see
+  # https://flutter.dev/assets-and-images/#resolution-aware
+
+  # For details regarding adding assets from package dependencies, see
+  # https://flutter.dev/assets-and-images/#from-packages
+
+  # To add custom fonts to your application, add a fonts section here,
+  # in this "flutter" section. Each entry in this list should have a
+  # "family" key with the font family name, and a "fonts" key with a
+  # list giving the asset and other descriptors for the font. For
+  # example:
+  fonts:
+    - family: Ultra
+      fonts:
+        - asset: fonts/Ultra-Regular.ttf
+    - family: Poppins
+      fonts:
+        - asset: fonts/Poppins-ThinItalic.ttf
+        - asset: fonts/Poppins-Regular.ttf
+  #       - asset: fonts/Schyler-Italic.ttf
+  #         style: italic
+  #   - family: Trajan Pro
+  #     fonts:
+  #       - asset: fonts/TrajanPro.ttf
+  #       - asset: fonts/TrajanPro_Bold.ttf
+  #         weight: 700
+  #
+  # For details regarding fonts from package dependencies,
+  # see https://flutter.dev/custom-fonts/#from-packages
Index: lib/widget/alert_dialog/show_alert.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/alert_dialog/show_alert.dart b/lib/widget/alert_dialog/show_alert.dart
new file mode 100644
--- /dev/null	(date 1722942405159)
+++ b/lib/widget/alert_dialog/show_alert.dart	(date 1722942405159)
@@ -0,0 +1,50 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_svg_provider/flutter_svg_provider.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+
+import '../../core/color.dart';
+import '../../core/static_assets.dart';
+import '../../pages/main_pages/main_pages.dart';
+
+class ShowAlert {
+  Future<String?> buildShowDialog(BuildContext context) {
+    return showDialog<String>(
+      context: context,
+      builder: (BuildContext context) => AlertDialog(
+
+        alignment: Alignment.center,
+        actionsAlignment: MainAxisAlignment.center,
+        title: Column(
+          children: [
+            Image(image: Svg(StaticAssets.verification),height: 20.h,),
+            Text(
+              'Congralutions',
+              style:
+                  Get.textTheme.bodyMedium!.copyWith(color: ColorConstants.black),
+            ),
+          ],
+        ),
+        content: Text(
+          'Your account is ready to use',
+          style:
+              Get.textTheme.labelLarge!.copyWith(color: ColorConstants.black),
+        ),
+        actions: <Widget>[
+          TextButton(
+            style: ButtonStyle(
+                backgroundColor: MaterialStateProperty.all<Color>(ColorConstants.black)),
+            onPressed: () => Navigator.push(
+              context,
+              MaterialPageRoute(
+                builder: (context) => const MainPages(),
+              ),
+            ),
+            child: const Text('Go to HomePage'),
+          ),
+        ],
+      ),
+    );
+  }
+}
Index: lib/controller/user_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/controller/user_controller.dart b/lib/controller/user_controller.dart
new file mode 100644
--- /dev/null	(date 1722952855586)
+++ b/lib/controller/user_controller.dart	(date 1722952855586)
@@ -0,0 +1,15 @@
+import 'package:get/get.dart';
+import 'package:hotel/service/auth.dart';
+
+class UserController{
+  var user;
+
+  AuthorizationService auth =Get.find();
+
+
+
+
+
+
+
+}
\ No newline at end of file
Index: lib/main.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/main.dart b/lib/main.dart
new file mode 100644
--- /dev/null	(date 1722950840407)
+++ b/lib/main.dart	(date 1722950840407)
@@ -0,0 +1,26 @@
+import 'package:firebase_core/firebase_core.dart';
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/pages/authorization/authorization.dart';
+import 'package:hotel/service/auth.dart';
+import 'package:hotel/service/firestore_service.dart';
+import 'controller/hotel_controller.dart';
+import 'controller/theme/theme_controller.dart';
+import 'firebase_options.dart';
+
+Future<void> main() async {
+  WidgetsFlutterBinding.ensureInitialized();
+  await Firebase.initializeApp(
+    options: DefaultFirebaseOptions.currentPlatform,
+  );
+  Get.put(FireStoreService());
+  Get.put(HotelController());
+  Get.put(AuthorizationService());
+  final themeController = Get.put(ThemeController());
+  runApp(GetMaterialApp(
+    debugShowCheckedModeBanner: false,
+    title: 'Flutter Demo',
+    theme: themeController.lightTheme,
+    home: const Authorization(),
+  ));
+}
Index: lib/widget/bottom_sheet/show_bottom_sheet.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/bottom_sheet/show_bottom_sheet.dart b/lib/widget/bottom_sheet/show_bottom_sheet.dart
new file mode 100644
--- /dev/null	(date 1722942694642)
+++ b/lib/widget/bottom_sheet/show_bottom_sheet.dart	(date 1722942694642)
@@ -0,0 +1,65 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import '../../core/color.dart';
+
+class ShowBottomSheet {
+  void bottomSheet(
+    BuildContext context,
+  ) {
+    showModalBottomSheet<void>(
+      context: context,
+      shape: RoundedRectangleBorder(
+        borderRadius: BorderRadius.circular(20),
+      ),
+      elevation: 0,
+      isScrollControlled: true,
+      builder: (BuildContext context) {
+        return SizedBox(
+          height: MediaQuery.of(context).size.height * 0.4,
+          child: Padding(
+            padding: 16.pH,
+            child: Column(
+              crossAxisAlignment: CrossAxisAlignment.stretch,
+              mainAxisAlignment: MainAxisAlignment.center,
+              children: [
+                Text(
+                  "Logout",
+                  style: Get.textTheme.headlineSmall!
+                      .copyWith(color: ColorConstants.red,fontWeight: FontWeight.bold),
+                  textAlign: TextAlign.center,
+                ),
+                Divider(color: ColorConstants.grey,),
+                2.yh,
+                Text("Are you sure you want to log out?",
+                    style: Get.textTheme.labelLarge!
+                        .copyWith(color: ColorConstants.black),textAlign: TextAlign.center,),
+                4.yh,
+                ElevatedButton(
+                    style: ButtonStyle(
+                      backgroundColor:
+                          MaterialStateProperty.all<Color>(ColorConstants.black),
+                    ),
+                    onPressed: () {},
+                    child: const Text("Yes, Logout")),
+                2.yh,
+                ElevatedButton(
+                    style: ButtonStyle(
+                      backgroundColor:
+                          MaterialStateProperty.all<Color>(ColorConstants.grey),
+                    ),
+                    onPressed: () {},
+                    child: Text(
+                      "Cancel",
+                      style: Get.textTheme.labelLarge!
+                          .copyWith(color: ColorConstants.black),
+                    ))
+              ],
+            ),
+          ),
+        );
+      },
+    );
+  }
+}
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(date 1722940986636)
+++ b/README.md	(date 1722940986636)
@@ -0,0 +1,16 @@
+# hotel
+
+A new Flutter project.
+
+## Getting Started
+
+This project is a starting point for a Flutter application.
+
+A few resources to get you started if this is your first Flutter project:
+
+- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)
+- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)
+
+For help getting started with Flutter development, view the
+[online documentation](https://docs.flutter.dev/), which offers tutorials,
+samples, guidance on mobile development, and a full API reference.
Index: lib/widget/profile_page/settings.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/profile_page/settings.dart b/lib/widget/profile_page/settings.dart
new file mode 100644
--- /dev/null	(date 1722942694609)
+++ b/lib/widget/profile_page/settings.dart	(date 1722942694609)
@@ -0,0 +1,25 @@
+import 'package:flutter/material.dart';
+import 'package:hotel/extentions/extentions.dart';
+import 'package:hotel/widget/profile_page/setting_option.dart';
+
+import '../../model/setting_data.dart';
+
+
+
+class Settings extends StatelessWidget {
+  const Settings({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return ListView.builder(
+      physics: const NeverScrollableScrollPhysics(),
+      shrinkWrap: true,
+      itemCount: SettingData().settingList.length,
+      padding: 8.pAll,
+      itemBuilder: (context, index) {
+        return SettingOption(
+            settingOptionModel: SettingData().settingList[index]);
+      },
+    );
+  }
+}
\ No newline at end of file
Index: lib/widget/profile_page/setting_option.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/profile_page/setting_option.dart b/lib/widget/profile_page/setting_option.dart
new file mode 100644
--- /dev/null	(date 1722942694637)
+++ b/lib/widget/profile_page/setting_option.dart	(date 1722942694637)
@@ -0,0 +1,32 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+
+import '../../model/setting_option_model.dart';
+
+class SettingOption extends StatefulWidget {
+  const SettingOption({
+    super.key, required this.settingOptionModel});
+
+  final SettingOptionModel settingOptionModel;
+
+  @override
+  State<SettingOption> createState() => _SettingOptionState();
+}
+
+class _SettingOptionState extends State<SettingOption> {
+  @override
+  Widget build(BuildContext context) {
+    return GestureDetector(
+      onTap: ()=> widget.settingOptionModel.onTap(context),
+      child: ListTile(
+        leading: widget.settingOptionModel.leading,
+        trailing: widget.settingOptionModel.trailing,
+        title: Text(
+          widget.settingOptionModel.text,
+          style: Get.textTheme.bodySmall!
+              .copyWith(color: widget.settingOptionModel.textColor),
+        ),
+      ),
+    );
+  }
+}
Index: lib/widget/profile_page/profile_details.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/profile_page/profile_details.dart b/lib/widget/profile_page/profile_details.dart
new file mode 100644
--- /dev/null	(date 1722953136717)
+++ b/lib/widget/profile_page/profile_details.dart	(date 1722953136717)
@@ -0,0 +1,72 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/model/user_model.dart';
+import 'package:hotel/service/auth.dart';
+import 'package:hotel/service/firestore_service.dart';
+import '../../core/color.dart';
+
+class ProfileDetails extends StatefulWidget {
+  const ProfileDetails({
+    super.key,
+  });
+
+  @override
+  State<ProfileDetails> createState() => _ProfileDetailsState();
+}
+
+class _ProfileDetailsState extends State<ProfileDetails> {
+  FireStoreService fireStore = FireStoreService();
+  final AuthorizationService auth = Get.find();
+  UserModel? user;
+  String? activeUserId;
+
+  @override
+  void initState() {
+    super.initState();
+    _fetchUserData();
+  }
+
+  Future<void> _fetchUserData() async {
+
+    if (activeUserId != null) {
+      UserModel? fetchedUser = await fireStore.getUser(activeUserId!);
+      setState(() {
+        user = fetchedUser;
+      });
+    }else{
+      print("user null");
+    }
+    print(activeUserId);
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (user == null) {
+      return const Center(child: CircularProgressIndicator());
+    }
+
+    return Obx((){
+      activeUserId = auth.activeUserId.value;
+      return Column(
+        children: [
+          CircleAvatar(
+            backgroundColor: ColorConstants.black,
+            backgroundImage: NetworkImage(user!.photoUrl ?? ''),
+            radius: 50,
+          ),
+          Text(
+            user!.fullName ?? 'No Name',
+            style: Get.textTheme.bodySmall!.copyWith(
+                color: ColorConstants.black, fontWeight: FontWeight.bold),
+          ),
+          Text(
+            user!.eMail ?? 'No Email',
+            style:
+            Get.textTheme.labelMedium!.copyWith(color: ColorConstants.black),
+          )
+        ],
+      );
+    }
+    );
+  }
+}
Index: lib/widget/onboarding_page/custom_clipper.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/onboarding_page/custom_clipper.dart b/lib/widget/onboarding_page/custom_clipper.dart
new file mode 100644
--- /dev/null	(date 1722498490162)
+++ b/lib/widget/onboarding_page/custom_clipper.dart	(date 1722498490162)
@@ -0,0 +1,29 @@
+import 'package:flutter/material.dart';
+
+class CustomShapeClipper extends CustomClipper<Path> {
+  @override
+  Path getClip(Size size) {
+    Path path = Path();
+
+    // Üst kenar
+    path.moveTo(0, 0);
+    path.lineTo(size.width, 0);
+
+    // Sağ kenar
+    path.lineTo(size.width, size.width * 0.8);
+
+    // Alt kenar
+    path.lineTo(size.width * 0.8, size.height);
+
+    // Sol kenar
+    path.lineTo(0, size.height * 0.3);
+
+    path.close();
+    return path;
+  }
+
+  @override
+  bool shouldReclip(covariant CustomClipper<Path> oldClipper) {
+    return false;
+  }
+}
\ No newline at end of file
Index: lib/widget/onboarding_page/onboarding_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/onboarding_page/onboarding_model.dart b/lib/widget/onboarding_page/onboarding_model.dart
new file mode 100644
--- /dev/null	(date 1722510043948)
+++ b/lib/widget/onboarding_page/onboarding_model.dart	(date 1722510043948)
@@ -0,0 +1,10 @@
+
+class OnboardingModel{
+
+  final String imageAsset;
+  final String trailerText;
+  final String contentText;
+
+  OnboardingModel({required this.imageAsset,required this.trailerText,required this.contentText});
+
+}
\ No newline at end of file
Index: lib/widget/onboarding_page/page_list_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/onboarding_page/page_list_controller.dart b/lib/widget/onboarding_page/page_list_controller.dart
new file mode 100644
--- /dev/null	(date 1722942694628)
+++ b/lib/widget/onboarding_page/page_list_controller.dart	(date 1722942694628)
@@ -0,0 +1,20 @@
+import 'onboarding_model.dart';
+
+
+class OnboardingList{
+  List<OnboardingModel> onboardingList=[
+    OnboardingModel(imageAsset:  "assets/images/bridge.jpg",
+      trailerText: "Let's\nhave the\nbest\nvacation\nwith us",
+      contentText: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eu eros et elit commodo lacinia vitae eget ligula. Sed id diam eget est dapibus placerat a non orci.",
+    ),
+    OnboardingModel(imageAsset:  "assets/images/sunset.jpg",
+      trailerText: "Let's\nhave the\nbest\nvacation\nwith us",
+      contentText: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eu eros et elit commodo lacinia vitae eget ligula. Sed id diam eget est dapibus placerat a non orci.",
+    ),
+    OnboardingModel(imageAsset:  "assets/images/sunsett.jpg",
+      trailerText: "Let's\nhave the\nbest\nvacation\nwith us",
+      contentText:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eu eros et elit commodo lacinia vitae eget ligula. Sed id diam eget est dapibus placerat a non orci.",
+    ),
+
+  ];
+}
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1722940986643)
+++ b/.gitignore	(date 1722940986643)
@@ -0,0 +1,43 @@
+# Miscellaneous
+*.class
+*.log
+*.pyc
+*.swp
+.DS_Store
+.atom/
+.buildlog/
+.history
+.svn/
+migrate_working_dir/
+
+# IntelliJ related
+*.iml
+*.ipr
+*.iws
+.idea/
+
+# The .vscode folder contains launch configuration and tasks you configure in
+# VS Code which you may wish to be included in version control, so this line
+# is commented out by default.
+#.vscode/
+
+# Flutter/Dart/Pub related
+**/doc/api/
+**/ios/Flutter/.last_build_id
+.dart_tool/
+.flutter-plugins
+.flutter-plugins-dependencies
+.pub-cache/
+.pub/
+/build/
+
+# Symbolication related
+app.*.symbols
+
+# Obfuscation related
+app.*.map.json
+
+# Android Studio will place build artifacts here
+/android/app/debug
+/android/app/profile
+/android/app/release
Index: .metadata
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.metadata b/.metadata
new file mode 100644
--- /dev/null	(date 1722940987020)
+++ b/.metadata	(date 1722940987020)
@@ -0,0 +1,39 @@
+# This file tracks properties of this Flutter project.
+# Used by Flutter tool to assess capabilities and perform upgrades etc.
+#
+# This file should be version controlled and should not be manually edited.
+
+version:
+  revision: "dbcce277f39facc2ae947145591a7073d31aabae"
+  channel: "master"
+
+project_type: app
+
+# Tracks metadata for the flutter migrate command
+migration:
+  platforms:
+    - platform: root
+      create_revision: dbcce277f39facc2ae947145591a7073d31aabae
+      base_revision: dbcce277f39facc2ae947145591a7073d31aabae
+    - platform: android
+      create_revision: dbcce277f39facc2ae947145591a7073d31aabae
+      base_revision: dbcce277f39facc2ae947145591a7073d31aabae
+    - platform: ios
+      create_revision: dbcce277f39facc2ae947145591a7073d31aabae
+      base_revision: dbcce277f39facc2ae947145591a7073d31aabae
+    - platform: web
+      create_revision: dbcce277f39facc2ae947145591a7073d31aabae
+      base_revision: dbcce277f39facc2ae947145591a7073d31aabae
+    - platform: windows
+      create_revision: dbcce277f39facc2ae947145591a7073d31aabae
+      base_revision: dbcce277f39facc2ae947145591a7073d31aabae
+
+  # User provided section
+
+  # List of Local paths (relative to this file) that should be
+  # ignored by the migrate tool.
+  #
+  # Files that are not part of the templates will be ignored by default.
+  unmanaged_files:
+    - 'lib/main.dart'
+    - 'ios/Runner.xcodeproj/project.pbxproj'
Index: lib/widget/authentication_page/login_page/other_signin_list.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/login_page/other_signin_list.dart b/lib/widget/authentication_page/login_page/other_signin_list.dart
new file mode 100644
--- /dev/null	(date 1722942694606)
+++ b/lib/widget/authentication_page/login_page/other_signin_list.dart	(date 1722942694606)
@@ -0,0 +1,27 @@
+import 'package:flutter/material.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import 'other_signin_button.dart';
+
+class OtherSignInList extends StatelessWidget {
+  const OtherSignInList({super.key});
+
+
+  @override
+  Widget build(BuildContext context) {
+    return SizedBox(
+      height: 12.h,
+      child: ListView.builder(
+        scrollDirection: Axis.horizontal,
+        itemCount: 3,
+        shrinkWrap: true,
+        itemBuilder: (context, index) {
+          return Padding(
+              padding: const EdgeInsets.symmetric(horizontal: 16.0),
+              child: OtherSignButtons(index: index,)
+          );
+        },
+      ),
+    );
+  }
+}
\ No newline at end of file
Index: lib/widget/authentication_page/login_page/other_signin_button.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/login_page/other_signin_button.dart b/lib/widget/authentication_page/login_page/other_signin_button.dart
new file mode 100644
--- /dev/null	(date 1722942694646)
+++ b/lib/widget/authentication_page/login_page/other_signin_button.dart	(date 1722942694646)
@@ -0,0 +1,24 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_svg_provider/flutter_svg_provider.dart';
+
+import '../../../core/static_assets.dart';
+
+class OtherSignButtons extends StatelessWidget {
+  const OtherSignButtons({
+    super.key, required this.index,
+  });
+
+
+  final int index;
+
+  @override
+  Widget build(BuildContext context) {
+    return Container(
+      decoration: BoxDecoration(borderRadius: BorderRadius.circular(30),
+          border: Border.all(color: Colors.black)),
+      child: Image(
+        image: Svg(StaticAssets.getAssetAddr(index)),
+      ),
+    );
+  }
+}
Index: lib/widget/authentication_page/text_field/special_field.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/text_field/special_field.dart b/lib/widget/authentication_page/text_field/special_field.dart
new file mode 100644
--- /dev/null	(date 1722604039821)
+++ b/lib/widget/authentication_page/text_field/special_field.dart	(date 1722604039821)
@@ -0,0 +1,42 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import '../../../core/color.dart';
+
+class SpecialField extends StatelessWidget {
+   const SpecialField({
+    super.key, required this.hintText,required this.prefix,required this.suffix, required this.obscureText,required this.keyboardType, required this.controller
+  });
+  final String hintText;
+  final Widget prefix;
+  final Widget suffix;
+  final TextInputType keyboardType;
+  final TextEditingController controller;
+  final bool obscureText;
+
+  @override
+  Widget build(BuildContext context) {
+    return TextField(
+      obscureText:obscureText,
+      controller: controller,
+      keyboardType: keyboardType,
+      cursorColor: ColorConstants.black,
+      decoration: InputDecoration(
+        prefixIcon: prefix,
+        suffixIcon: suffix,
+        filled: true,
+        fillColor: ColorConstants.grey,
+        focusedBorder: OutlineInputBorder(
+          borderRadius: BorderRadius.circular(20),
+          borderSide: BorderSide(color: ColorConstants.black, width: 2.0),
+        ),
+        hintText: hintText,
+        hintStyle: Get.textTheme.labelLarge!.copyWith(color: ColorConstants.black),
+        border: OutlineInputBorder(
+          borderRadius: BorderRadius.circular(20),
+          borderSide: BorderSide(color: ColorConstants.black),
+        ),
+      ),
+      style: Get.textTheme.bodySmall!.copyWith(color: ColorConstants.black),
+    );
+  }
+}
\ No newline at end of file
Index: pubspec.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.lock b/pubspec.lock
new file mode 100644
--- /dev/null	(date 1722943168528)
+++ b/pubspec.lock	(date 1722943168528)
@@ -0,0 +1,458 @@
+# Generated by pub
+# See https://dart.dev/tools/pub/glossary#lockfile
+packages:
+  _flutterfire_internals:
+    dependency: transitive
+    description:
+      name: _flutterfire_internals
+      sha256: b1595874fbc8f7a50da90f5d8f327bb0bfd6a95dc906c390efe991540c3b54aa
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.40"
+  args:
+    dependency: transitive
+    description:
+      name: args
+      sha256: "7cf60b9f0cc88203c5a190b4cd62a99feea42759a7fa695010eb5de1c0b2252a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.5.0"
+  async:
+    dependency: transitive
+    description:
+      name: async
+      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.11.0"
+  boolean_selector:
+    dependency: transitive
+    description:
+      name: boolean_selector
+      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.1"
+  characters:
+    dependency: transitive
+    description:
+      name: characters
+      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.0"
+  clock:
+    dependency: transitive
+    description:
+      name: clock
+      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.1"
+  cloud_firestore:
+    dependency: "direct main"
+    description:
+      name: cloud_firestore
+      sha256: a7782612945fffa07cb99cf2e1e152f6c6152ee57fc201a7249e08a97a875bdb
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.2.0"
+  cloud_firestore_platform_interface:
+    dependency: transitive
+    description:
+      name: cloud_firestore_platform_interface
+      sha256: "4ea584875e9c192559a21a8198727ad333b2b85b22af8ca2fa8b0b112de069dc"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.3.0"
+  cloud_firestore_web:
+    dependency: transitive
+    description:
+      name: cloud_firestore_web
+      sha256: "530066aa006b7d23e4cd8312d08cef996f80e6cbb0f1c2e7256b5fa200404127"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.1.0"
+  collection:
+    dependency: transitive
+    description:
+      name: collection
+      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.18.0"
+  cupertino_icons:
+    dependency: "direct main"
+    description:
+      name: cupertino_icons
+      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.8"
+  fake_async:
+    dependency: transitive
+    description:
+      name: fake_async
+      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.1"
+  firebase_auth:
+    dependency: "direct main"
+    description:
+      name: firebase_auth
+      sha256: b0dde65595b65c0c2c2c2127da0ce7772a375fcefbea8490c1563a4aecbd0195
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.1.3"
+  firebase_auth_platform_interface:
+    dependency: transitive
+    description:
+      name: firebase_auth_platform_interface
+      sha256: "0408e2ed74b1afa0490a93aa041fe90d7573af7ffc59a641edc6c5b5c1b8d2a4"
+      url: "https://pub.dev"
+    source: hosted
+    version: "7.4.3"
+  firebase_auth_web:
+    dependency: transitive
+    description:
+      name: firebase_auth_web
+      sha256: "7e0c6d0fa8c5c1b2ae126a78f2d1a206a77a913f78d20f155487bf746162dccc"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.12.5"
+  firebase_core:
+    dependency: "direct main"
+    description:
+      name: firebase_core
+      sha256: "3187f4f8e49968573fd7403011dca67ba95aae419bc0d8131500fae160d94f92"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.3.0"
+  firebase_core_platform_interface:
+    dependency: transitive
+    description:
+      name: firebase_core_platform_interface
+      sha256: "3c3a1e92d6f4916c32deea79c4a7587aa0e9dbbe5889c7a16afcf005a485ee02"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.2.0"
+  firebase_core_web:
+    dependency: transitive
+    description:
+      name: firebase_core_web
+      sha256: e8d1e22de72cb21cdcfc5eed7acddab3e99cd83f3b317f54f7a96c32f25fd11e
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.17.4"
+  flutter:
+    dependency: "direct main"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_lints:
+    dependency: "direct dev"
+    description:
+      name: flutter_lints
+      sha256: "9e8c3858111da373efc5aa341de011d9bd23e2c5c5e0c62bccf32438e192d7b1"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.2"
+  flutter_onboarding_slider:
+    dependency: "direct main"
+    description:
+      name: flutter_onboarding_slider
+      sha256: "70d6b7c8d469abb31f66fd80c61915d7ff9c05d2c9001ec7db659702e7bc4f9d"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.11"
+  flutter_svg:
+    dependency: transitive
+    description:
+      name: flutter_svg
+      sha256: "7b4ca6cf3304575fe9c8ec64813c8d02ee41d2afe60bcfe0678bcb5375d596a2"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.10+1"
+  flutter_svg_provider:
+    dependency: "direct main"
+    description:
+      name: flutter_svg_provider
+      sha256: cda47ab350671ba51ae4605d48f4c82fa5a2c399d22ebda367c1b407234c5048
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.7"
+  flutter_test:
+    dependency: "direct dev"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_web_plugins:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  font_awesome_flutter:
+    dependency: transitive
+    description:
+      name: font_awesome_flutter
+      sha256: "275ff26905134bcb59417cf60ad979136f1f8257f2f449914b2c3e05bbb4cd6f"
+      url: "https://pub.dev"
+    source: hosted
+    version: "10.7.0"
+  get:
+    dependency: "direct main"
+    description:
+      name: get
+      sha256: e4e7335ede17452b391ed3b2ede016545706c01a02292a6c97619705e7d2a85e
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.6.6"
+  http:
+    dependency: transitive
+    description:
+      name: http
+      sha256: b9c29a161230ee03d3ccf545097fccd9b87a5264228c5d348202e0f0c28f9010
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.2"
+  http_parser:
+    dependency: transitive
+    description:
+      name: http_parser
+      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.2"
+  leak_tracker:
+    dependency: transitive
+    description:
+      name: leak_tracker
+      sha256: "7f0df31977cb2c0b88585095d168e689669a2cc9b97c309665e3386f3e9d341a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "10.0.4"
+  leak_tracker_flutter_testing:
+    dependency: transitive
+    description:
+      name: leak_tracker_flutter_testing
+      sha256: "06e98f569d004c1315b991ded39924b21af84cf14cc94791b8aea337d25b57f8"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.3"
+  leak_tracker_testing:
+    dependency: transitive
+    description:
+      name: leak_tracker_testing
+      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.1"
+  lints:
+    dependency: transitive
+    description:
+      name: lints
+      sha256: cbf8d4b858bb0134ef3ef87841abdf8d63bfc255c266b7bf6b39daa1085c4290
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.0"
+  matcher:
+    dependency: transitive
+    description:
+      name: matcher
+      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.12.16+1"
+  material_color_utilities:
+    dependency: transitive
+    description:
+      name: material_color_utilities
+      sha256: "0e0a020085b65b6083975e499759762399b4475f766c21668c4ecca34ea74e5a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.8.0"
+  meta:
+    dependency: transitive
+    description:
+      name: meta
+      sha256: "7687075e408b093f36e6bbf6c91878cc0d4cd10f409506f7bc996f68220b9136"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.12.0"
+  nested:
+    dependency: transitive
+    description:
+      name: nested
+      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.0"
+  path:
+    dependency: transitive
+    description:
+      name: path
+      sha256: "087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.9.0"
+  path_parsing:
+    dependency: transitive
+    description:
+      name: path_parsing
+      sha256: e3e67b1629e6f7e8100b367d3db6ba6af4b1f0bb80f64db18ef1fbabd2fa9ccf
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.1"
+  petitparser:
+    dependency: transitive
+    description:
+      name: petitparser
+      sha256: c15605cd28af66339f8eb6fbe0e541bfe2d1b72d5825efc6598f3e0a31b9ad27
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.0.2"
+  plugin_platform_interface:
+    dependency: transitive
+    description:
+      name: plugin_platform_interface
+      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.8"
+  provider:
+    dependency: transitive
+    description:
+      name: provider
+      sha256: c8a055ee5ce3fd98d6fc872478b03823ffdb448699c6ebdbbc71d59b596fd48c
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.1.2"
+  sign_in_button:
+    dependency: "direct main"
+    description:
+      name: sign_in_button
+      sha256: "977b9b0415d2f3909e642275dfabba7919ba8e111324641b76cae6d1acbd183e"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.2.0"
+  sky_engine:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.99"
+  source_span:
+    dependency: transitive
+    description:
+      name: source_span
+      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.10.0"
+  stack_trace:
+    dependency: transitive
+    description:
+      name: stack_trace
+      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.11.1"
+  stream_channel:
+    dependency: transitive
+    description:
+      name: stream_channel
+      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.2"
+  string_scanner:
+    dependency: transitive
+    description:
+      name: string_scanner
+      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.0"
+  term_glyph:
+    dependency: transitive
+    description:
+      name: term_glyph
+      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.1"
+  test_api:
+    dependency: transitive
+    description:
+      name: test_api
+      sha256: "9955ae474176f7ac8ee4e989dadfb411a58c30415bcfb648fa04b2b8a03afa7f"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.7.0"
+  typed_data:
+    dependency: transitive
+    description:
+      name: typed_data
+      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.2"
+  vector_graphics:
+    dependency: transitive
+    description:
+      name: vector_graphics
+      sha256: "32c3c684e02f9bc0afb0ae0aa653337a2fe022e8ab064bcd7ffda27a74e288e3"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.11+1"
+  vector_graphics_codec:
+    dependency: transitive
+    description:
+      name: vector_graphics_codec
+      sha256: c86987475f162fadff579e7320c7ddda04cd2fdeffbe1129227a85d9ac9e03da
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.11+1"
+  vector_graphics_compiler:
+    dependency: transitive
+    description:
+      name: vector_graphics_compiler
+      sha256: "12faff3f73b1741a36ca7e31b292ddeb629af819ca9efe9953b70bd63fc8cd81"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.11+1"
+  vector_math:
+    dependency: transitive
+    description:
+      name: vector_math
+      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.4"
+  vm_service:
+    dependency: transitive
+    description:
+      name: vm_service
+      sha256: e7d5ecd604e499358c5fe35ee828c0298a320d54455e791e9dcf73486bc8d9f0
+      url: "https://pub.dev"
+    source: hosted
+    version: "14.1.0"
+  web:
+    dependency: transitive
+    description:
+      name: web
+      sha256: "97da13628db363c635202ad97068d47c5b8aa555808e7a9411963c533b449b27"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.5.1"
+  xml:
+    dependency: transitive
+    description:
+      name: xml
+      sha256: b015a8ad1c488f66851d762d3090a21c600e479dc75e68328c52774040cf9226
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.5.0"
+sdks:
+  dart: ">=3.4.0-220.0.dev <4.0.0"
+  flutter: ">=3.18.0-18.0.pre.54"
Index: lib/widget/authentication_page/signin_page/signin_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/signin_page/signin_widget.dart b/lib/widget/authentication_page/signin_page/signin_widget.dart
new file mode 100644
--- /dev/null	(date 1722942694633)
+++ b/lib/widget/authentication_page/signin_page/signin_widget.dart	(date 1722942694633)
@@ -0,0 +1,86 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import '../../../controller/server/api/server_controller.dart';
+import '../../../controller/text_controller/text_controller.dart';
+import '../../../core/color.dart';
+import '../../../core/icon.dart';
+import '../../../pages/authentication/forgot_password/forgot_password/forgot_password.dart';
+import '../../../pages/main_pages/main_pages.dart';
+import '../text_field/special_field.dart';
+//import '../../../pages/dataset2.dart';
+
+class SignInWidget extends StatelessWidget {
+  const SignInWidget({super.key});
+
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: 12.pH,
+      child: Column(
+        mainAxisAlignment: MainAxisAlignment.center,
+        crossAxisAlignment: CrossAxisAlignment.stretch,
+        children: [
+          Text(
+            "Login to your Account",
+            textAlign: TextAlign.start,
+            style:
+                Get.textTheme.titleSmall!.copyWith(color: ColorConstants.black),
+          ),
+          4.yh,
+          SpecialField(
+            obscureText: false,
+            controller: TextControllers().mailController,
+            hintText: "E-mail",
+            prefix: StaticIcons.email,
+            suffix: StaticIcons.email,
+            keyboardType: TextInputType.emailAddress,
+          ),
+          4.yh,
+          SpecialField(
+            obscureText: true,
+            controller: TextControllers().passwordController,
+            hintText: "Password",
+            prefix: StaticIcons.password,
+            suffix: StaticIcons.password,
+            keyboardType: TextInputType.text,
+          ),
+          4.yh,
+          ElevatedButton(
+            style: ButtonStyle(
+              backgroundColor:
+                  MaterialStateProperty.all<Color>(ColorConstants.black),
+            ),
+            onPressed: () async{
+             ServerController().signIn();
+
+              Navigator.push(
+                context,
+                MaterialPageRoute(
+                  builder: (context) => const MainPages(),
+                ),
+              );
+            },
+            child: const Text("Sign in"),
+          ),
+          TextButton(
+            onPressed: () {
+              Navigator.push(
+                  context,
+                  MaterialPageRoute(
+                    builder: (context) => const ForgotPassword(),
+                  ));
+            },
+            child: Text(
+              "Forgot the password?",
+              style: Get.textTheme.labelLarge!
+                  .copyWith(color: ColorConstants.green),
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+}
Index: analysis_options.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/analysis_options.yaml b/analysis_options.yaml
new file mode 100644
--- /dev/null	(date 1722940986652)
+++ b/analysis_options.yaml	(date 1722940986652)
@@ -0,0 +1,28 @@
+# This file configures the analyzer, which statically analyzes Dart code to
+# check for errors, warnings, and lints.
+#
+# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
+# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
+# invoked from the command line by running `flutter analyze`.
+
+# The following line activates a set of recommended lints for Flutter apps,
+# packages, and plugins designed to encourage good coding practices.
+include: package:flutter_lints/flutter.yaml
+
+linter:
+  # The lint rules applied to this project can be customized in the
+  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
+  # included above or to enable additional rules. A list of all available lints
+  # and their documentation is published at https://dart.dev/lints.
+  #
+  # Instead of disabling a lint rule for the entire project in the
+  # section below, it can also be suppressed for a single line of code
+  # or a specific dart file by using the `// ignore: name_of_lint` and
+  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
+  # producing the lint.
+  rules:
+    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
+    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
+
+# Additional information about this file can be found at
+# https://dart.dev/guides/language/analysis-options
Index: lib/widget/authentication_page/signin_page/signup_button_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/signin_page/signup_button_widget.dart b/lib/widget/authentication_page/signin_page/signup_button_widget.dart
new file mode 100644
--- /dev/null	(date 1722428207420)
+++ b/lib/widget/authentication_page/signin_page/signup_button_widget.dart	(date 1722428207420)
@@ -0,0 +1,44 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+
+import '../../../core/color.dart';
+
+class SignUpButtonWidget extends StatelessWidget {
+  const SignUpButtonWidget({
+    super.key,
+    required this.pageController,
+  });
+
+  final PageController pageController;
+
+  @override
+  Widget build(BuildContext context) {
+    return Row(
+      mainAxisAlignment: MainAxisAlignment.center,
+      children: [
+        Text(
+          "Don't have an account",
+          style: Get.textTheme.labelLarge!
+              .copyWith(color: ColorConstants.black),
+        ),
+        TextButton(
+          onPressed: () {
+            if (pageController.hasClients) {
+              pageController.animateToPage(
+                2,
+                duration: const Duration(milliseconds: 400),
+                curve: Curves.easeInOut,
+              );
+            }
+          },
+          child: Text(
+            "Sign up",
+            style: Get.textTheme.labelLarge!.copyWith(
+                fontWeight: FontWeight.bold,
+                color: ColorConstants.black),
+          ),
+        )
+      ],
+    );
+  }
+}
\ No newline at end of file
Index: lib/widget/authentication_page/signup_page/signup_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/signup_page/signup_widget.dart b/lib/widget/authentication_page/signup_page/signup_widget.dart
new file mode 100644
--- /dev/null	(date 1722942694658)
+++ b/lib/widget/authentication_page/signup_page/signup_widget.dart	(date 1722942694658)
@@ -0,0 +1,94 @@
+import 'package:flutter/gestures.dart';
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+import '../../../controller/server/api/server_controller.dart';
+import '../../../controller/text_controller/text_controller.dart';
+import '../../../core/color.dart';
+import '../../../core/icon.dart';
+import '../../../pages/main_pages/main_pages.dart';
+import '../text_field/special_field.dart';
+
+class SignUpWidget extends StatelessWidget {
+  const SignUpWidget({super.key});
+
+
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: 12.pH,
+      child: Column(
+          mainAxisAlignment: MainAxisAlignment.center,
+          crossAxisAlignment: CrossAxisAlignment.stretch,
+          children: [
+            Text(
+              "Create your Account",
+              textAlign: TextAlign.start,
+              style: Get.textTheme.titleSmall!
+                  .copyWith(color: ColorConstants.black),
+            ),
+            4.yh,
+            SpecialField(
+              obscureText: false,
+              controller: TextControllers().newNameController,
+              hintText: "Name",
+              prefix: StaticIcons.email,
+              suffix: StaticIcons.email,
+              keyboardType: TextInputType.text,
+            ),
+            4.yh,
+            SpecialField(
+              obscureText: false,
+              controller: TextControllers().newMailController,
+              hintText: "E-mail",
+              prefix: StaticIcons.email,
+              suffix: StaticIcons.email,
+              keyboardType: TextInputType.emailAddress,
+            ),
+            4.yh,
+            SpecialField(
+              obscureText: true,
+              controller: TextControllers().newPasswordController,
+              hintText: "Password",
+              prefix: StaticIcons.email,
+              suffix: StaticIcons.email,
+              keyboardType: TextInputType.text,
+            ),
+            4.yh,
+            ElevatedButton(
+              style: ButtonStyle(
+                backgroundColor:
+                    MaterialStateProperty.all<Color>(ColorConstants.black),
+              ),
+              onPressed: () {
+                ServerController().newUser();
+                Navigator.push(context, MaterialPageRoute(builder: (context) => MainPages(),));
+
+              },
+              child: const Text("Sign up"),
+            ),
+            Padding(
+              padding: const EdgeInsets.all(12.0),
+              child: RichText(
+                textAlign: TextAlign.center,
+                text: TextSpan(
+                  text: 'By signing up you agree to LearnEase\'s ',
+                  style: const TextStyle(color: Colors.black, fontSize: 16),
+                  children: [
+                    TextSpan(
+                      text: 'Terms of Services and Privacy Policy.',
+                      style: const TextStyle(
+                          color: Colors.green,
+                          fontSize: 16,
+                          fontWeight: FontWeight.bold),
+                      recognizer: TapGestureRecognizer()..onTap = () {},
+                    ),
+                  ],
+                ),
+              ),
+            ),
+          ]),
+    );
+  }
+}
Index: lib/widget/authentication_page/signup_page/signin_button_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/signup_page/signin_button_widget.dart b/lib/widget/authentication_page/signup_page/signin_button_widget.dart
new file mode 100644
--- /dev/null	(date 1722428207410)
+++ b/lib/widget/authentication_page/signup_page/signin_button_widget.dart	(date 1722428207410)
@@ -0,0 +1,44 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+
+import '../../../core/color.dart';
+
+class SignInButtonWidget extends StatelessWidget {
+  const SignInButtonWidget({
+    super.key,
+    required this.pageController,
+  });
+
+  final PageController pageController;
+
+  @override
+  Widget build(BuildContext context) {
+    return Row(
+      mainAxisAlignment: MainAxisAlignment.center,
+      children: [
+        Text(
+          "Already have an account",
+          style: Get.textTheme.labelLarge!
+              .copyWith(color: ColorConstants.black),
+        ),
+        TextButton(
+          onPressed: () {
+            if (pageController.hasClients) {
+              pageController.animateToPage(
+                2,
+                duration: const Duration(milliseconds: 400),
+                curve: Curves.easeInOut,
+              );
+            }
+          },
+          child: Text(
+            "Sign in",
+            style: Get.textTheme.labelLarge!.copyWith(
+                fontWeight: FontWeight.bold,
+                color: ColorConstants.black),
+          ),
+        )
+      ],
+    );
+  }
+}
\ No newline at end of file
Index: test/widget_test.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/widget_test.dart b/test/widget_test.dart
new file mode 100644
--- /dev/null	(date 1722942405171)
+++ b/test/widget_test.dart	(date 1722942405171)
@@ -0,0 +1,30 @@
+// This is a basic Flutter widget test.
+//
+// To perform an interaction with a widget in your test, use the WidgetTester
+// utility in the flutter_test package. For example, you can send tap and scroll
+// gestures. You can also use WidgetTester to find child widgets in the widget
+// tree, read text, and verify that the values of widget properties are correct.
+
+import 'package:flutter/material.dart';
+import 'package:flutter_test/flutter_test.dart';
+import 'package:hotel/pages/welcome_page/welcome_page.dart';
+
+
+void main() {
+  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
+    // Build our app and trigger a frame.
+    await tester.pumpWidget(const WelcomePage());
+
+    // Verify that our counter starts at 0.
+    expect(find.text('0'), findsOneWidget);
+    expect(find.text('1'), findsNothing);
+
+    // Tap the '+' icon and trigger a frame.
+    await tester.tap(find.byIcon(Icons.add));
+    await tester.pump();
+
+    // Verify that our counter has incremented.
+    expect(find.text('0'), findsNothing);
+    expect(find.text('1'), findsOneWidget);
+  });
+}
Index: lib/widget/authentication_page/forgot_password/forgot_option.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/forgot_password/forgot_option.dart b/lib/widget/authentication_page/forgot_password/forgot_option.dart
new file mode 100644
--- /dev/null	(date 1722942405174)
+++ b/lib/widget/authentication_page/forgot_password/forgot_option.dart	(date 1722942405174)
@@ -0,0 +1,72 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_svg_provider/flutter_svg_provider.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+import '../../../core/static_assets.dart';
+
+class ForgotOption extends StatelessWidget {
+  final Function(bool) onSelectOption;
+
+  const ForgotOption({super.key, required this.onSelectOption});
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: 16.pAll,
+      child: Column(
+        mainAxisAlignment: MainAxisAlignment.center,
+        children: [
+          GestureDetector(
+            onTap: () {
+              onSelectOption(true); // SMS seçeneği
+            },
+            child: Container(
+              decoration: BoxDecoration(
+                  borderRadius: BorderRadius.circular(20),
+                  border: Border.all(color: Colors.black),
+                  color: Colors.greenAccent),
+              child: ListTile(
+                leading: CircleAvatar(
+                  radius: 30,
+                  backgroundColor: Colors.grey,
+                  backgroundImage: Svg(StaticAssets.sms),
+                ),
+                title: Text(
+                  "Via SMS",
+                  style: Get.textTheme.labelLarge!.copyWith(color: Colors.grey),
+                ),
+                subtitle: Text("Enter Mobile Number",
+                    style: Get.textTheme.labelMedium!.copyWith(color: Colors.black)),
+              ),
+            ),
+          ),
+          4.yh,
+          GestureDetector(
+            onTap: () {
+              onSelectOption(false); // E-mail seçeneği
+            },
+            child: Container(
+              decoration: BoxDecoration(
+                  borderRadius: BorderRadius.circular(20),
+                  border: Border.all(color: Colors.black),
+                  color: Colors.greenAccent),
+              child: ListTile(
+                leading: CircleAvatar(
+                  radius: 30,
+                  backgroundImage: Svg(StaticAssets.mail),
+                  backgroundColor: Colors.grey,
+                ),
+                title: Text(
+                  "Via E-mail",
+                  style: Get.textTheme.labelLarge!.copyWith(color: Colors.grey),
+                ),
+                subtitle: Text("Enter E-mail ID",
+                    style: Get.textTheme.labelMedium!.copyWith(color: Colors.black)),
+              ),
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+}
Index: lib/widget/authentication_page/forgot_password/forgot_details.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/forgot_password/forgot_details.dart b/lib/widget/authentication_page/forgot_password/forgot_details.dart
new file mode 100644
--- /dev/null	(date 1722942405163)
+++ b/lib/widget/authentication_page/forgot_password/forgot_details.dart	(date 1722942405163)
@@ -0,0 +1,36 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_svg_provider/flutter_svg_provider.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import '../../../core/static_assets.dart';
+
+class ForgotDetails extends StatelessWidget {
+  const ForgotDetails({
+    super.key,
+  });
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: 16.pAll,
+      child: Column(
+        children: [
+          SizedBox(
+            height: 30.h,
+            width: 50.w,
+            child: Image(
+              image: Svg(StaticAssets.forgotPassword),
+              fit: BoxFit.cover,
+            ),
+          ),
+          4.yh,
+          Text(
+            "Select which contact details should we use to reset your password.",
+            style: Get.textTheme.labelMedium!.copyWith(color: Colors.black),
+          ),
+        ],
+      ),
+    );
+  }
+}
Index: android/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/.gitignore b/android/.gitignore
new file mode 100644
--- /dev/null	(date 1693159852753)
+++ b/android/.gitignore	(date 1693159852753)
@@ -0,0 +1,13 @@
+gradle-wrapper.jar
+/.gradle
+/captures/
+/gradlew
+/gradlew.bat
+/local.properties
+GeneratedPluginRegistrant.java
+
+# Remember to never publicly share your keystore.
+# See https://flutter.dev/docs/deployment/android#reference-the-keystore-from-the-app
+key.properties
+**/*.keystore
+**/*.jks
Index: lib/widget/authentication_page/forgot_password/sms_mail_sender.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/forgot_password/sms_mail_sender.dart b/lib/widget/authentication_page/forgot_password/sms_mail_sender.dart
new file mode 100644
--- /dev/null	(date 1722942405150)
+++ b/lib/widget/authentication_page/forgot_password/sms_mail_sender.dart	(date 1722942405150)
@@ -0,0 +1,79 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_svg_provider/flutter_svg_provider.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+
+import '../../../core/color.dart';
+import '../../../core/static_assets.dart';
+import '../../../pages/authentication/forgot_password/verification/verification_page.dart';
+
+class SendToMailAndSms extends StatelessWidget {
+   SendToMailAndSms({
+    super.key, required this.option,
+  });
+  final bool option;
+  final TextEditingController controller =TextEditingController();
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: 16.pAll,
+      child: Column(
+        crossAxisAlignment: CrossAxisAlignment.stretch,
+        mainAxisAlignment: MainAxisAlignment.end,
+        children: [
+          Container(
+            decoration: BoxDecoration(
+                borderRadius: BorderRadius.circular(20),
+                border: Border.all(color: Colors.black),
+                color: Colors.greenAccent),
+            child: ListTile(
+              leading: CircleAvatar(
+                radius: 30,
+                backgroundColor: Colors.grey,
+                backgroundImage: Svg(StaticAssets.sms),
+              ),
+              title: Text(
+                option?"Via SMS":"E-Mail",
+                style: Get.textTheme.labelLarge!.copyWith(color: Colors.grey),
+              ),
+              subtitle: TextField(
+                controller: controller,
+                style: Get.textTheme.labelLarge!.copyWith(color: ColorConstants.black),
+                keyboardType: option ? TextInputType.phone : TextInputType.emailAddress,
+                cursorColor: ColorConstants.black,
+                decoration: InputDecoration(
+                  enabledBorder: OutlineInputBorder(
+                    borderRadius: BorderRadius.circular(20),
+                    borderSide: BorderSide(color: ColorConstants.black, width: 2.0),
+                  ),
+                  focusedBorder: OutlineInputBorder(
+                    borderRadius: BorderRadius.circular(20),
+                    borderSide: BorderSide(color: ColorConstants.green, width: 2.0),
+                  ),
+                  hintText: option ? "SMS" : "E-Mail",
+                  hintStyle: Get.textTheme.labelLarge!.copyWith(color: ColorConstants.black),
+                  border: OutlineInputBorder(
+                    borderRadius: BorderRadius.circular(20),
+                    borderSide: BorderSide(color: ColorConstants.black),
+                  ),
+                ),
+              ),
+            ),
+          ),
+          16.yh,
+          ElevatedButton(onPressed: (){
+            Navigator.push(context, MaterialPageRoute(builder: (context) => VerificationPage(cmInfo: controller.text,),));
+          },
+            style: ButtonStyle(backgroundColor:  MaterialStateProperty.all<Color>(ColorConstants.black),
+            ),
+            child: Text("Continue",
+              style: Get.textTheme.labelLarge!.copyWith(
+              ),),
+          ),
+        ],
+      ),
+    );
+  }
+}
Index: lib/widget/authentication_page/divider_with_text.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/authentication_page/divider_with_text.dart b/lib/widget/authentication_page/divider_with_text.dart
new file mode 100644
--- /dev/null	(date 1721815872137)
+++ b/lib/widget/authentication_page/divider_with_text.dart	(date 1721815872137)
@@ -0,0 +1,36 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+
+class DividerWithText extends StatelessWidget {
+  final String text;
+
+  const DividerWithText({super.key, required this.text});
+
+  @override
+  Widget build(BuildContext context) {
+    return Row(
+      children: <Widget>[
+        const Expanded(
+          child: Divider(
+            color: Colors.black,
+            thickness: 1,
+          ),
+        ),
+        Padding(
+          padding: const EdgeInsets.symmetric(horizontal: 8.0),
+          child: Text(
+            text,
+            style: Get.textTheme.bodySmall!
+                .copyWith(color: Colors.grey, fontWeight: FontWeight.bold),
+          ),
+        ),
+        const Expanded(
+          child: Divider(
+            color: Colors.black,
+            thickness: 1,
+          ),
+        ),
+      ],
+    );
+  }
+}
Index: android/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/build.gradle b/android/build.gradle
new file mode 100644
--- /dev/null	(date 1722941456656)
+++ b/android/build.gradle	(date 1722941456656)
@@ -0,0 +1,18 @@
+allprojects {
+    repositories {
+        google()
+        mavenCentral()
+    }
+}
+
+rootProject.buildDir = "../build"
+subprojects {
+    project.buildDir = "${rootProject.buildDir}/${project.name}"
+}
+subprojects {
+    project.evaluationDependsOn(":app")
+}
+
+tasks.register("clean", Delete) {
+    delete rootProject.buildDir
+}
Index: android/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/android/gradle.properties b/android/gradle.properties
new file mode 100644
--- /dev/null	(date 1722940986726)
+++ b/android/gradle.properties	(date 1722940986726)
@@ -0,0 +1,3 @@
+org.gradle.jvmargs=-Xmx4G -XX:+HeapDumpOnOutOfMemoryError
+android.useAndroidX=true
+android.enableJetifier=true
Index: firebase.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firebase.json b/firebase.json
new file mode 100644
--- /dev/null	(date 1722941456667)
+++ b/firebase.json	(date 1722941456667)
@@ -0,0 +1,1 @@
+{"flutter":{"platforms":{"android":{"default":{"projectId":"bookingapp-e37ae","appId":"1:38617110216:android:ecd7943a6e9b74621ef7fd","fileOutput":"android/app/google-services.json"}},"dart":{"lib/firebase_options.dart":{"projectId":"bookingapp-e37ae","configurations":{"android":"1:38617110216:android:ecd7943a6e9b74621ef7fd","ios":"1:38617110216:ios:00447ac024018c461ef7fd","web":"1:38617110216:web:60ff77e3849b9c911ef7fd"}}}}}}
\ No newline at end of file
Index: lib/firebase_options.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/firebase_options.dart b/lib/firebase_options.dart
new file mode 100644
--- /dev/null	(date 1722941456664)
+++ b/lib/firebase_options.dart	(date 1722941456664)
@@ -0,0 +1,75 @@
+// File generated by FlutterFire CLI.
+// ignore_for_file: type=lint
+import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
+import 'package:flutter/foundation.dart'
+    show defaultTargetPlatform, kIsWeb, TargetPlatform;
+
+/// Default [FirebaseOptions] for use with your Firebase apps.
+///
+/// Example:
+/// ```dart
+/// import 'firebase_options.dart';
+/// // ...
+/// await Firebase.initializeApp(
+///   options: DefaultFirebaseOptions.currentPlatform,
+/// );
+/// ```
+class DefaultFirebaseOptions {
+  static FirebaseOptions get currentPlatform {
+    if (kIsWeb) {
+      return web;
+    }
+    switch (defaultTargetPlatform) {
+      case TargetPlatform.android:
+        return android;
+      case TargetPlatform.iOS:
+        return ios;
+      case TargetPlatform.macOS:
+        throw UnsupportedError(
+          'DefaultFirebaseOptions have not been configured for macos - '
+          'you can reconfigure this by running the FlutterFire CLI again.',
+        );
+      case TargetPlatform.windows:
+        throw UnsupportedError(
+          'DefaultFirebaseOptions have not been configured for windows - '
+          'you can reconfigure this by running the FlutterFire CLI again.',
+        );
+      case TargetPlatform.linux:
+        throw UnsupportedError(
+          'DefaultFirebaseOptions have not been configured for linux - '
+          'you can reconfigure this by running the FlutterFire CLI again.',
+        );
+      default:
+        throw UnsupportedError(
+          'DefaultFirebaseOptions are not supported for this platform.',
+        );
+    }
+  }
+
+  static const FirebaseOptions web = FirebaseOptions(
+    apiKey: 'AIzaSyD05kbjt6_Q87fLMKrvUMb3k7AgYwdUbx8',
+    appId: '1:38617110216:web:60ff77e3849b9c911ef7fd',
+    messagingSenderId: '38617110216',
+    projectId: 'bookingapp-e37ae',
+    authDomain: 'bookingapp-e37ae.firebaseapp.com',
+    storageBucket: 'bookingapp-e37ae.appspot.com',
+  );
+
+  static const FirebaseOptions android = FirebaseOptions(
+    apiKey: 'AIzaSyBHwTWAPSk3lzOupIKA-Q-l_lYVQJp-I0k',
+    appId: '1:38617110216:android:ecd7943a6e9b74621ef7fd',
+    messagingSenderId: '38617110216',
+    projectId: 'bookingapp-e37ae',
+    storageBucket: 'bookingapp-e37ae.appspot.com',
+  );
+
+  static const FirebaseOptions ios = FirebaseOptions(
+    apiKey: 'AIzaSyCC6GnZ8iQxzQLrZxMBmrtLzJJGXkxVbIE',
+    appId: '1:38617110216:ios:00447ac024018c461ef7fd',
+    messagingSenderId: '38617110216',
+    projectId: 'bookingapp-e37ae',
+    storageBucket: 'bookingapp-e37ae.appspot.com',
+    iosClientId: '38617110216-3tcl1v0o9ge4iee1et16uskm4ru836p8.apps.googleusercontent.com',
+    iosBundleId: 'com.example.hotel',
+  );
+}
Index: android/settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/settings.gradle b/android/settings.gradle
new file mode 100644
--- /dev/null	(date 1722941456655)
+++ b/android/settings.gradle	(date 1722941456655)
@@ -0,0 +1,28 @@
+pluginManagement {
+    def flutterSdkPath = {
+        def properties = new Properties()
+        file("local.properties").withInputStream { properties.load(it) }
+        def flutterSdkPath = properties.getProperty("flutter.sdk")
+        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
+        return flutterSdkPath
+    }()
+
+    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")
+
+    repositories {
+        google()
+        mavenCentral()
+        gradlePluginPortal()
+    }
+}
+
+plugins {
+    id "dev.flutter.flutter-plugin-loader" version "1.0.0"
+    id "com.android.application" version "7.3.0" apply false
+    // START: FlutterFire Configuration
+    id "com.google.gms.google-services" version "4.3.15" apply false
+    // END: FlutterFire Configuration
+    id "org.jetbrains.kotlin.android" version "1.7.10" apply false
+}
+
+include ":app"
Index: android/app/google-services.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/google-services.json b/android/app/google-services.json
new file mode 100644
--- /dev/null	(date 1722941456649)
+++ b/android/app/google-services.json	(date 1722941456649)
@@ -0,0 +1,46 @@
+{
+  "project_info": {
+    "project_number": "38617110216",
+    "project_id": "bookingapp-e37ae",
+    "storage_bucket": "bookingapp-e37ae.appspot.com"
+  },
+  "client": [
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:38617110216:android:ecd7943a6e9b74621ef7fd",
+        "android_client_info": {
+          "package_name": "com.example.hotel"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "38617110216-qg8bt514dsraqb0qhm0tk4n61pou1u1i.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyBHwTWAPSk3lzOupIKA-Q-l_lYVQJp-I0k"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "38617110216-qg8bt514dsraqb0qhm0tk4n61pou1u1i.apps.googleusercontent.com",
+              "client_type": 3
+            },
+            {
+              "client_id": "38617110216-29i3j945ess4aklq9ok6p7imbfka9khf.apps.googleusercontent.com",
+              "client_type": 2,
+              "ios_info": {
+                "bundle_id": "com.example.hotelBooking"
+              }
+            }
+          ]
+        }
+      }
+    }
+  ],
+  "configuration_version": "1"
+}
\ No newline at end of file
Index: android/app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/build.gradle b/android/app/build.gradle
new file mode 100644
--- /dev/null	(date 1722942845116)
+++ b/android/app/build.gradle	(date 1722942845116)
@@ -0,0 +1,61 @@
+plugins {
+    id "com.android.application"
+    // START: FlutterFire Configuration
+    id 'com.google.gms.google-services'
+    // END: FlutterFire Configuration
+    id "kotlin-android"
+    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
+    id "dev.flutter.flutter-gradle-plugin"
+}
+
+def localProperties = new Properties()
+def localPropertiesFile = rootProject.file("local.properties")
+if (localPropertiesFile.exists()) {
+    localPropertiesFile.withReader("UTF-8") { reader ->
+        localProperties.load(reader)
+    }
+}
+
+def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
+if (flutterVersionCode == null) {
+    flutterVersionCode = "1"
+}
+
+def flutterVersionName = localProperties.getProperty("flutter.versionName")
+if (flutterVersionName == null) {
+    flutterVersionName = "1.0"
+}
+
+android {
+    namespace = "com.example.hotel"
+    compileSdk = flutter.compileSdkVersion
+    ndkVersion = flutter.ndkVersion
+
+    compileOptions {
+        sourceCompatibility = JavaVersion.VERSION_1_8
+        targetCompatibility = JavaVersion.VERSION_1_8
+    }
+
+    defaultConfig {
+        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
+        applicationId = "com.example.hotel"
+        // You can update the following values to match your application needs.
+        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
+        minSdk = 23
+        targetSdk = flutter.targetSdkVersion
+        versionCode = flutterVersionCode.toInteger()
+        versionName = flutterVersionName
+    }
+
+    buildTypes {
+        release {
+            // TODO: Add your own signing config for the release build.
+            // Signing with the debug keys for now, so `flutter run --release` works.
+            signingConfig = signingConfigs.debug
+        }
+    }
+}
+
+flutter {
+    source = "../.."
+}
Index: android/gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1722940986724)
+++ b/android/gradle/wrapper/gradle-wrapper.properties	(date 1722940986724)
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.6.3-all.zip
Index: android/app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1722940986681)
+++ b/android/app/src/main/AndroidManifest.xml	(date 1722940986681)
@@ -0,0 +1,45 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+    <application
+        android:label="hotel"
+        android:name="${applicationName}"
+        android:icon="@mipmap/ic_launcher">
+        <activity
+            android:name=".MainActivity"
+            android:exported="true"
+            android:launchMode="singleTop"
+            android:taskAffinity=""
+            android:theme="@style/LaunchTheme"
+            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
+            android:hardwareAccelerated="true"
+            android:windowSoftInputMode="adjustResize">
+            <!-- Specifies an Android theme to apply to this Activity as soon as
+                 the Android process has started. This theme is visible to the user
+                 while the Flutter UI initializes. After that, this theme continues
+                 to determine the Window background behind the Flutter UI. -->
+            <meta-data
+              android:name="io.flutter.embedding.android.NormalTheme"
+              android:resource="@style/NormalTheme"
+              />
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
+        <!-- Don't delete the meta-data below.
+             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
+        <meta-data
+            android:name="flutterEmbedding"
+            android:value="2" />
+    </application>
+    <!-- Required to query activities that can process text, see:
+         https://developer.android.com/training/package-visibility and
+         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.
+
+         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
+    <queries>
+        <intent>
+            <action android:name="android.intent.action.PROCESS_TEXT"/>
+            <data android:mimeType="text/plain"/>
+        </intent>
+    </queries>
+</manifest>
Index: android/app/src/debug/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/debug/AndroidManifest.xml b/android/app/src/debug/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1722940986679)
+++ b/android/app/src/debug/AndroidManifest.xml	(date 1722940986679)
@@ -0,0 +1,7 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- The INTERNET permission is required for development. Specifically,
+         the Flutter tool needs it to communicate with the running application
+         to allow setting breakpoints, to provide hot reload, etc.
+    -->
+    <uses-permission android:name="android.permission.INTERNET"/>
+</manifest>
Index: android/app/src/profile/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/profile/AndroidManifest.xml b/android/app/src/profile/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1722940986718)
+++ b/android/app/src/profile/AndroidManifest.xml	(date 1722940986718)
@@ -0,0 +1,7 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- The INTERNET permission is required for development. Specifically,
+         the Flutter tool needs it to communicate with the running application
+         to allow setting breakpoints, to provide hot reload, etc.
+    -->
+    <uses-permission android:name="android.permission.INTERNET"/>
+</manifest>
Index: android/app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/values/styles.xml b/android/app/src/main/res/values/styles.xml
new file mode 100644
--- /dev/null	(date 1693159853025)
+++ b/android/app/src/main/res/values/styles.xml	(date 1693159853025)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
+    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <!-- Show a splash screen on the activity. Automatically removed when
+             the Flutter engine draws its first frame -->
+        <item name="android:windowBackground">@drawable/launch_background</item>
+    </style>
+    <!-- Theme applied to the Android Window as soon as the process has started.
+         This theme determines the color of the Android Window while your
+         Flutter UI initializes, as well as behind your Flutter UI while its
+         running.
+
+         This Theme is only used starting with V2 of Flutter's Android embedding. -->
+    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <item name="android:windowBackground">?android:colorBackground</item>
+    </style>
+</resources>
Index: android/app/src/main/res/drawable/launch_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/drawable/launch_background.xml b/android/app/src/main/res/drawable/launch_background.xml
new file mode 100644
--- /dev/null	(date 1693159852885)
+++ b/android/app/src/main/res/drawable/launch_background.xml	(date 1693159852885)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Modify this file to customize your launch splash screen -->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@android:color/white" />
+
+    <!-- You can insert your own image assets here -->
+    <!-- <item>
+        <bitmap
+            android:gravity="center"
+            android:src="@mipmap/launch_image" />
+    </item> -->
+</layer-list>
Index: android/app/src/main/res/drawable-v21/launch_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/drawable-v21/launch_background.xml b/android/app/src/main/res/drawable-v21/launch_background.xml
new file mode 100644
--- /dev/null	(date 1693159852911)
+++ b/android/app/src/main/res/drawable-v21/launch_background.xml	(date 1693159852911)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Modify this file to customize your launch splash screen -->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="?android:colorBackground" />
+
+    <!-- You can insert your own image assets here -->
+    <!-- <item>
+        <bitmap
+            android:gravity="center"
+            android:src="@mipmap/launch_image" />
+    </item> -->
+</layer-list>
Index: android/app/src/main/res/values-night/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/values-night/styles.xml b/android/app/src/main/res/values-night/styles.xml
new file mode 100644
--- /dev/null	(date 1693159853051)
+++ b/android/app/src/main/res/values-night/styles.xml	(date 1693159853051)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
+    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
+        <!-- Show a splash screen on the activity. Automatically removed when
+             the Flutter engine draws its first frame -->
+        <item name="android:windowBackground">@drawable/launch_background</item>
+    </style>
+    <!-- Theme applied to the Android Window as soon as the process has started.
+         This theme determines the color of the Android Window while your
+         Flutter UI initializes, as well as behind your Flutter UI while its
+         running.
+
+         This Theme is only used starting with V2 of Flutter's Android embedding. -->
+    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
+        <item name="android:windowBackground">?android:colorBackground</item>
+    </style>
+</resources>
Index: android/app/src/main/kotlin/com/example/hotel/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/kotlin/com/example/hotel/MainActivity.kt b/android/app/src/main/kotlin/com/example/hotel/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1722940986666)
+++ b/android/app/src/main/kotlin/com/example/hotel/MainActivity.kt	(date 1722940986666)
@@ -0,0 +1,5 @@
+package com.example.hotel
+
+import io.flutter.embedding.android.FlutterActivity
+
+class MainActivity: FlutterActivity()
Index: ios/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/.gitignore b/ios/.gitignore
new file mode 100644
--- /dev/null	(date 1693159853392)
+++ b/ios/.gitignore	(date 1693159853392)
@@ -0,0 +1,34 @@
+**/dgph
+*.mode1v3
+*.mode2v3
+*.moved-aside
+*.pbxuser
+*.perspectivev3
+**/*sync/
+.sconsign.dblite
+.tags*
+**/.vagrant/
+**/DerivedData/
+Icon?
+**/Pods/
+**/.symlinks/
+profile
+xcuserdata
+**/.generated/
+Flutter/App.framework
+Flutter/Flutter.framework
+Flutter/Flutter.podspec
+Flutter/Generated.xcconfig
+Flutter/ephemeral/
+Flutter/app.flx
+Flutter/app.zip
+Flutter/flutter_assets/
+Flutter/flutter_export_environment.sh
+ServiceDefinitions.json
+Runner/GeneratedPluginRegistrant.*
+
+# Exceptions to above rules.
+!default.mode1v3
+!default.mode2v3
+!default.pbxuser
+!default.perspectivev3
Index: ios/Runner/AppDelegate.swift
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/AppDelegate.swift b/ios/Runner/AppDelegate.swift
new file mode 100644
--- /dev/null	(date 1710086659270)
+++ b/ios/Runner/AppDelegate.swift	(date 1710086659270)
@@ -0,0 +1,13 @@
+import Flutter
+import UIKit
+
+@UIApplicationMain
+@objc class AppDelegate: FlutterAppDelegate {
+  override func application(
+    _ application: UIApplication,
+    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
+  ) -> Bool {
+    GeneratedPluginRegistrant.register(with: self)
+    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
+  }
+}
Index: ios/Runner/Info.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Info.plist b/ios/Runner/Info.plist
new file mode 100644
--- /dev/null	(date 1722940986854)
+++ b/ios/Runner/Info.plist	(date 1722940986854)
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>$(DEVELOPMENT_LANGUAGE)</string>
+	<key>CFBundleDisplayName</key>
+	<string>Hotel</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>hotel</string>
+	<key>CFBundlePackageType</key>
+	<string>APPL</string>
+	<key>CFBundleShortVersionString</key>
+	<string>$(FLUTTER_BUILD_NAME)</string>
+	<key>CFBundleSignature</key>
+	<string>????</string>
+	<key>CFBundleVersion</key>
+	<string>$(FLUTTER_BUILD_NUMBER)</string>
+	<key>LSRequiresIPhoneOS</key>
+	<true/>
+	<key>UILaunchStoryboardName</key>
+	<string>LaunchScreen</string>
+	<key>UIMainStoryboardFile</key>
+	<string>Main</string>
+	<key>UISupportedInterfaceOrientations</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+	<key>UISupportedInterfaceOrientations~ipad</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationPortraitUpsideDown</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+	<key>CADisableMinimumFrameDurationOnPhone</key>
+	<true/>
+	<key>UIApplicationSupportsIndirectInputEvents</key>
+	<true/>
+</dict>
+</plist>
Index: ios/Runner/Runner-Bridging-Header.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Runner-Bridging-Header.h b/ios/Runner/Runner-Bridging-Header.h
new file mode 100644
--- /dev/null	(date 1693159853282)
+++ b/ios/Runner/Runner-Bridging-Header.h	(date 1693159853282)
@@ -0,0 +1,1 @@
+#import "GeneratedPluginRegistrant.h"
Index: ios/Flutter/AppFrameworkInfo.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Flutter/AppFrameworkInfo.plist b/ios/Flutter/AppFrameworkInfo.plist
new file mode 100644
--- /dev/null	(date 1710086659271)
+++ b/ios/Flutter/AppFrameworkInfo.plist	(date 1710086659271)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+  <key>CFBundleDevelopmentRegion</key>
+  <string>en</string>
+  <key>CFBundleExecutable</key>
+  <string>App</string>
+  <key>CFBundleIdentifier</key>
+  <string>io.flutter.flutter.app</string>
+  <key>CFBundleInfoDictionaryVersion</key>
+  <string>6.0</string>
+  <key>CFBundleName</key>
+  <string>App</string>
+  <key>CFBundlePackageType</key>
+  <string>FMWK</string>
+  <key>CFBundleShortVersionString</key>
+  <string>1.0</string>
+  <key>CFBundleSignature</key>
+  <string>????</string>
+  <key>CFBundleVersion</key>
+  <string>1.0</string>
+  <key>MinimumOSVersion</key>
+  <string>12.0</string>
+</dict>
+</plist>
Index: ios/Flutter/Debug.xcconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Flutter/Debug.xcconfig b/ios/Flutter/Debug.xcconfig
new file mode 100644
--- /dev/null	(date 1693159853426)
+++ b/ios/Flutter/Debug.xcconfig	(date 1693159853426)
@@ -0,0 +1,1 @@
+#include "Generated.xcconfig"
Index: ios/Flutter/Release.xcconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Flutter/Release.xcconfig b/ios/Flutter/Release.xcconfig
new file mode 100644
--- /dev/null	(date 1693159853440)
+++ b/ios/Flutter/Release.xcconfig	(date 1693159853440)
@@ -0,0 +1,1 @@
+#include "Generated.xcconfig"
Index: ios/RunnerTests/RunnerTests.swift
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/RunnerTests/RunnerTests.swift b/ios/RunnerTests/RunnerTests.swift
new file mode 100644
--- /dev/null	(date 1722940986761)
+++ b/ios/RunnerTests/RunnerTests.swift	(date 1722940986761)
@@ -0,0 +1,12 @@
+import Flutter
+import UIKit
+import XCTest
+
+class RunnerTests: XCTestCase {
+
+  func testExample() {
+    // If you add code to the Runner application, consider adding tests here.
+    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
+  }
+
+}
Index: ios/Runner.xcodeproj/project.pbxproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/project.pbxproj b/ios/Runner.xcodeproj/project.pbxproj
new file mode 100644
--- /dev/null	(date 1722940986750)
+++ b/ios/Runner.xcodeproj/project.pbxproj	(date 1722940986750)
@@ -0,0 +1,616 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 54;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
+		331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 331C807B294A618700263BE5 /* RunnerTests.swift */; };
+		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
+		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
+		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
+		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
+		97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXContainerItemProxy section */
+		331C8085294A63A400263BE5 /* PBXContainerItemProxy */ = {
+			isa = PBXContainerItemProxy;
+			containerPortal = 97C146E61CF9000F007C117D /* Project object */;
+			proxyType = 1;
+			remoteGlobalIDString = 97C146ED1CF9000F007C117D;
+			remoteInfo = Runner;
+		};
+/* End PBXContainerItemProxy section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		9705A1C41CF9048500538489 /* Embed Frameworks */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 2147483647;
+			dstPath = "";
+			dstSubfolderSpec = 10;
+			files = (
+			);
+			name = "Embed Frameworks";
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
+		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
+		331C807B294A618700263BE5 /* RunnerTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RunnerTests.swift; sourceTree = "<group>"; };
+		331C8081294A63A400263BE5 /* RunnerTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = RunnerTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
+		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
+		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
+		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
+		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
+		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Debug.xcconfig; path = Flutter/Debug.xcconfig; sourceTree = "<group>"; };
+		9740EEB31CF90195004384FC /* Generated.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Generated.xcconfig; path = Flutter/Generated.xcconfig; sourceTree = "<group>"; };
+		97C146EE1CF9000F007C117D /* Runner.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Runner.app; sourceTree = BUILT_PRODUCTS_DIR; };
+		97C146FB1CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
+		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
+		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
+		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		97C146EB1CF9000F007C117D /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		331C8082294A63A400263BE5 /* RunnerTests */ = {
+			isa = PBXGroup;
+			children = (
+				331C807B294A618700263BE5 /* RunnerTests.swift */,
+			);
+			path = RunnerTests;
+			sourceTree = "<group>";
+		};
+		9740EEB11CF90186004384FC /* Flutter */ = {
+			isa = PBXGroup;
+			children = (
+				3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */,
+				9740EEB21CF90195004384FC /* Debug.xcconfig */,
+				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
+				9740EEB31CF90195004384FC /* Generated.xcconfig */,
+			);
+			name = Flutter;
+			sourceTree = "<group>";
+		};
+		97C146E51CF9000F007C117D = {
+			isa = PBXGroup;
+			children = (
+				9740EEB11CF90186004384FC /* Flutter */,
+				97C146F01CF9000F007C117D /* Runner */,
+				97C146EF1CF9000F007C117D /* Products */,
+				331C8082294A63A400263BE5 /* RunnerTests */,
+			);
+			sourceTree = "<group>";
+		};
+		97C146EF1CF9000F007C117D /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				97C146EE1CF9000F007C117D /* Runner.app */,
+				331C8081294A63A400263BE5 /* RunnerTests.xctest */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		97C146F01CF9000F007C117D /* Runner */ = {
+			isa = PBXGroup;
+			children = (
+				97C146FA1CF9000F007C117D /* Main.storyboard */,
+				97C146FD1CF9000F007C117D /* Assets.xcassets */,
+				97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */,
+				97C147021CF9000F007C117D /* Info.plist */,
+				1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */,
+				1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */,
+				74858FAE1ED2DC5600515810 /* AppDelegate.swift */,
+				74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */,
+			);
+			path = Runner;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		331C8080294A63A400263BE5 /* RunnerTests */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */;
+			buildPhases = (
+				331C807D294A63A400263BE5 /* Sources */,
+				331C807F294A63A400263BE5 /* Resources */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+				331C8086294A63A400263BE5 /* PBXTargetDependency */,
+			);
+			name = RunnerTests;
+			productName = RunnerTests;
+			productReference = 331C8081294A63A400263BE5 /* RunnerTests.xctest */;
+			productType = "com.apple.product-type.bundle.unit-test";
+		};
+		97C146ED1CF9000F007C117D /* Runner */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
+			buildPhases = (
+				9740EEB61CF901F6004384FC /* Run Script */,
+				97C146EA1CF9000F007C117D /* Sources */,
+				97C146EB1CF9000F007C117D /* Frameworks */,
+				97C146EC1CF9000F007C117D /* Resources */,
+				9705A1C41CF9048500538489 /* Embed Frameworks */,
+				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = Runner;
+			productName = Runner;
+			productReference = 97C146EE1CF9000F007C117D /* Runner.app */;
+			productType = "com.apple.product-type.application";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		97C146E61CF9000F007C117D /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				BuildIndependentTargetsInParallel = YES;
+				LastUpgradeCheck = 1510;
+				ORGANIZATIONNAME = "";
+				TargetAttributes = {
+					331C8080294A63A400263BE5 = {
+						CreatedOnToolsVersion = 14.0;
+						TestTargetID = 97C146ED1CF9000F007C117D;
+					};
+					97C146ED1CF9000F007C117D = {
+						CreatedOnToolsVersion = 7.3.1;
+						LastSwiftMigration = 1100;
+					};
+				};
+			};
+			buildConfigurationList = 97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 97C146E51CF9000F007C117D;
+			productRefGroup = 97C146EF1CF9000F007C117D /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				97C146ED1CF9000F007C117D /* Runner */,
+				331C8080294A63A400263BE5 /* RunnerTests */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXResourcesBuildPhase section */
+		331C807F294A63A400263BE5 /* Resources */ = {
+			isa = PBXResourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+		97C146EC1CF9000F007C117D /* Resources */ = {
+			isa = PBXResourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */,
+				3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */,
+				97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */,
+				97C146FC1CF9000F007C117D /* Main.storyboard in Resources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXResourcesBuildPhase section */
+
+/* Begin PBXShellScriptBuildPhase section */
+		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
+			isa = PBXShellScriptBuildPhase;
+			alwaysOutOfDate = 1;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputPaths = (
+				"${TARGET_BUILD_DIR}/${INFOPLIST_PATH}",
+			);
+			name = "Thin Binary";
+			outputPaths = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
+		};
+		9740EEB61CF901F6004384FC /* Run Script */ = {
+			isa = PBXShellScriptBuildPhase;
+			alwaysOutOfDate = 1;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputPaths = (
+			);
+			name = "Run Script";
+			outputPaths = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
+		};
+/* End PBXShellScriptBuildPhase section */
+
+/* Begin PBXSourcesBuildPhase section */
+		331C807D294A63A400263BE5 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+		97C146EA1CF9000F007C117D /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */,
+				1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin PBXTargetDependency section */
+		331C8086294A63A400263BE5 /* PBXTargetDependency */ = {
+			isa = PBXTargetDependency;
+			target = 97C146ED1CF9000F007C117D /* Runner */;
+			targetProxy = 331C8085294A63A400263BE5 /* PBXContainerItemProxy */;
+		};
+/* End PBXTargetDependency section */
+
+/* Begin PBXVariantGroup section */
+		97C146FA1CF9000F007C117D /* Main.storyboard */ = {
+			isa = PBXVariantGroup;
+			children = (
+				97C146FB1CF9000F007C117D /* Base */,
+			);
+			name = Main.storyboard;
+			sourceTree = "<group>";
+		};
+		97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */ = {
+			isa = PBXVariantGroup;
+			children = (
+				97C147001CF9000F007C117D /* Base */,
+			);
+			name = LaunchScreen.storyboard;
+			sourceTree = "<group>";
+		};
+/* End PBXVariantGroup section */
+
+/* Begin XCBuildConfiguration section */
+		249021D3217E4FDB00AE95B9 /* Profile */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_USER_SCRIPT_SANDBOXING = NO;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				SDKROOT = iphoneos;
+				SUPPORTED_PLATFORMS = iphoneos;
+				TARGETED_DEVICE_FAMILY = "1,2";
+				VALIDATE_PRODUCT = YES;
+			};
+			name = Profile;
+		};
+		249021D4217E4FDB00AE95B9 /* Profile */ = {
+			isa = XCBuildConfiguration;
+			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
+			buildSettings = {
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CLANG_ENABLE_MODULES = YES;
+				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
+				ENABLE_BITCODE = NO;
+				INFOPLIST_FILE = Runner/Info.plist;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = com.example.hotel;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
+				SWIFT_VERSION = 5.0;
+				VERSIONING_SYSTEM = "apple-generic";
+			};
+			name = Profile;
+		};
+		331C8088294A63A400263BE5 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				BUNDLE_LOADER = "$(TEST_HOST)";
+				CODE_SIGN_STYLE = Automatic;
+				CURRENT_PROJECT_VERSION = 1;
+				GENERATE_INFOPLIST_FILE = YES;
+				MARKETING_VERSION = 1.0;
+				PRODUCT_BUNDLE_IDENTIFIER = com.example.hotel.RunnerTests;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
+				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
+				SWIFT_VERSION = 5.0;
+				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
+			};
+			name = Debug;
+		};
+		331C8089294A63A400263BE5 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				BUNDLE_LOADER = "$(TEST_HOST)";
+				CODE_SIGN_STYLE = Automatic;
+				CURRENT_PROJECT_VERSION = 1;
+				GENERATE_INFOPLIST_FILE = YES;
+				MARKETING_VERSION = 1.0;
+				PRODUCT_BUNDLE_IDENTIFIER = com.example.hotel.RunnerTests;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_VERSION = 5.0;
+				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
+			};
+			name = Release;
+		};
+		331C808A294A63A400263BE5 /* Profile */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				BUNDLE_LOADER = "$(TEST_HOST)";
+				CODE_SIGN_STYLE = Automatic;
+				CURRENT_PROJECT_VERSION = 1;
+				GENERATE_INFOPLIST_FILE = YES;
+				MARKETING_VERSION = 1.0;
+				PRODUCT_BUNDLE_IDENTIFIER = com.example.hotel.RunnerTests;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_VERSION = 5.0;
+				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
+			};
+			name = Profile;
+		};
+		97C147031CF9000F007C117D /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				ENABLE_USER_SCRIPT_SANDBOXING = NO;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
+				MTL_ENABLE_DEBUG_INFO = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = iphoneos;
+				TARGETED_DEVICE_FAMILY = "1,2";
+			};
+			name = Debug;
+		};
+		97C147041CF9000F007C117D /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_USER_SCRIPT_SANDBOXING = NO;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				SDKROOT = iphoneos;
+				SUPPORTED_PLATFORMS = iphoneos;
+				SWIFT_COMPILATION_MODE = wholemodule;
+				SWIFT_OPTIMIZATION_LEVEL = "-O";
+				TARGETED_DEVICE_FAMILY = "1,2";
+				VALIDATE_PRODUCT = YES;
+			};
+			name = Release;
+		};
+		97C147061CF9000F007C117D /* Debug */ = {
+			isa = XCBuildConfiguration;
+			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
+			buildSettings = {
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CLANG_ENABLE_MODULES = YES;
+				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
+				ENABLE_BITCODE = NO;
+				INFOPLIST_FILE = Runner/Info.plist;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = com.example.hotel;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
+				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
+				SWIFT_VERSION = 5.0;
+				VERSIONING_SYSTEM = "apple-generic";
+			};
+			name = Debug;
+		};
+		97C147071CF9000F007C117D /* Release */ = {
+			isa = XCBuildConfiguration;
+			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
+			buildSettings = {
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CLANG_ENABLE_MODULES = YES;
+				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
+				ENABLE_BITCODE = NO;
+				INFOPLIST_FILE = Runner/Info.plist;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = com.example.hotel;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
+				SWIFT_VERSION = 5.0;
+				VERSIONING_SYSTEM = "apple-generic";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				331C8088294A63A400263BE5 /* Debug */,
+				331C8089294A63A400263BE5 /* Release */,
+				331C808A294A63A400263BE5 /* Profile */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				97C147031CF9000F007C117D /* Debug */,
+				97C147041CF9000F007C117D /* Release */,
+				249021D3217E4FDB00AE95B9 /* Profile */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				97C147061CF9000F007C117D /* Debug */,
+				97C147071CF9000F007C117D /* Release */,
+				249021D4217E4FDB00AE95B9 /* Profile */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 97C146E61CF9000F007C117D /* Project object */;
+}
Index: ios/Runner.xcworkspace/contents.xcworkspacedata
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcworkspace/contents.xcworkspacedata b/ios/Runner.xcworkspace/contents.xcworkspacedata
new file mode 100644
--- /dev/null	(date 1693159853895)
+++ b/ios/Runner.xcworkspace/contents.xcworkspacedata	(date 1693159853895)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "group:Runner.xcodeproj">
+   </FileRef>
+</Workspace>
Index: ios/Runner/Base.lproj/LaunchScreen.storyboard
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Base.lproj/LaunchScreen.storyboard b/ios/Runner/Base.lproj/LaunchScreen.storyboard
new file mode 100644
--- /dev/null	(date 1693159853773)
+++ b/ios/Runner/Base.lproj/LaunchScreen.storyboard	(date 1693159853773)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="12121" systemVersion="16G29" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
+    <dependencies>
+        <deployment identifier="iOS"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="12089"/>
+    </dependencies>
+    <scenes>
+        <!--View Controller-->
+        <scene sceneID="EHf-IW-A2E">
+            <objects>
+                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
+                    <layoutGuides>
+                        <viewControllerLayoutGuide type="top" id="Ydg-fD-yQy"/>
+                        <viewControllerLayoutGuide type="bottom" id="xbc-2k-c8Z"/>
+                    </layoutGuides>
+                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <subviews>
+                            <imageView opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" image="LaunchImage" translatesAutoresizingMaskIntoConstraints="NO" id="YRO-k0-Ey4">
+                            </imageView>
+                        </subviews>
+                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
+                        <constraints>
+                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerX" secondItem="Ze5-6b-2t3" secondAttribute="centerX" id="1a2-6s-vTC"/>
+                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerY" secondItem="Ze5-6b-2t3" secondAttribute="centerY" id="4X2-HB-R7a"/>
+                        </constraints>
+                    </view>
+                </viewController>
+                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
+            </objects>
+            <point key="canvasLocation" x="53" y="375"/>
+        </scene>
+    </scenes>
+    <resources>
+        <image name="LaunchImage" width="168" height="185"/>
+    </resources>
+</document>
Index: ios/Runner/Base.lproj/Main.storyboard
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Base.lproj/Main.storyboard b/ios/Runner/Base.lproj/Main.storyboard
new file mode 100644
--- /dev/null	(date 1693159853794)
+++ b/ios/Runner/Base.lproj/Main.storyboard	(date 1693159853794)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15F34" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="BYZ-38-t0r">
+    <dependencies>
+        <deployment identifier="iOS"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
+    </dependencies>
+    <scenes>
+        <!--Flutter View Controller-->
+        <scene sceneID="tne-QT-ifu">
+            <objects>
+                <viewController id="BYZ-38-t0r" customClass="FlutterViewController" sceneMemberID="viewController">
+                    <layoutGuides>
+                        <viewControllerLayoutGuide type="top" id="y3c-jy-aDJ"/>
+                        <viewControllerLayoutGuide type="bottom" id="wfy-db-euE"/>
+                    </layoutGuides>
+                    <view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
+                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
+                    </view>
+                </viewController>
+                <placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
+            </objects>
+        </scene>
+    </scenes>
+</document>
Index: ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
--- /dev/null	(date 1693159853820)
+++ b/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata	(date 1693159853820)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:">
+   </FileRef>
+</Workspace>
Index: ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
--- /dev/null	(date 1693159853912)
+++ b/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist	(date 1693159853912)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
Index: ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings b/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
new file mode 100644
--- /dev/null	(date 1693159853925)
+++ b/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings	(date 1693159853925)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>PreviewsEnabled</key>
+	<false/>
+</dict>
+</plist>
Index: ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json b/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json
new file mode 100644
--- /dev/null	(date 1693159853492)
+++ b/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json	(date 1693159853492)
@@ -0,0 +1,122 @@
+{
+  "images" : [
+    {
+      "size" : "20x20",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-20x20@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "20x20",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-20x20@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-29x29@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-29x29@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-29x29@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-40x40@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-40x40@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "60x60",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-60x60@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "60x60",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-60x60@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "20x20",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-20x20@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "20x20",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-20x20@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-29x29@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-29x29@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-40x40@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-40x40@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "76x76",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-76x76@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "76x76",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-76x76@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "83.5x83.5",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-83.5x83.5@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "1024x1024",
+      "idiom" : "ios-marketing",
+      "filename" : "Icon-App-1024x1024@1x.png",
+      "scale" : "1x"
+    }
+  ],
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
Index: ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json b/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json
new file mode 100644
--- /dev/null	(date 1693159853694)
+++ b/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json	(date 1693159853694)
@@ -0,0 +1,23 @@
+{
+  "images" : [
+    {
+      "idiom" : "universal",
+      "filename" : "LaunchImage.png",
+      "scale" : "1x"
+    },
+    {
+      "idiom" : "universal",
+      "filename" : "LaunchImage@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "universal",
+      "filename" : "LaunchImage@3x.png",
+      "scale" : "3x"
+    }
+  ],
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
Index: ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md b/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md
new file mode 100644
--- /dev/null	(date 1693159853749)
+++ b/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md	(date 1693159853749)
@@ -0,0 +1,5 @@
+# Launch Screen Assets
+
+You can customize the launch screen with your own desired assets by replacing the image files in this directory.
+
+You can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.
\ No newline at end of file
Index: ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme b/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme
new file mode 100644
--- /dev/null	(date 1710086659270)
+++ b/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme	(date 1710086659270)
@@ -0,0 +1,98 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1510"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+               BuildableName = "Runner.app"
+               BlueprintName = "Runner"
+               ReferencedContainer = "container:Runner.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+            BuildableName = "Runner.app"
+            BlueprintName = "Runner"
+            ReferencedContainer = "container:Runner.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+      <Testables>
+         <TestableReference
+            skipped = "NO"
+            parallelizable = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "331C8080294A63A400263BE5"
+               BuildableName = "RunnerTests.xctest"
+               BlueprintName = "RunnerTests"
+               ReferencedContainer = "container:Runner.xcodeproj">
+            </BuildableReference>
+         </TestableReference>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+            BuildableName = "Runner.app"
+            BlueprintName = "Runner"
+            ReferencedContainer = "container:Runner.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Profile"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+            BuildableName = "Runner.app"
+            BlueprintName = "Runner"
+            ReferencedContainer = "container:Runner.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
Index: ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
--- /dev/null	(date 1693159853847)
+++ b/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist	(date 1693159853847)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
Index: ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings b/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
new file mode 100644
--- /dev/null	(date 1693159853868)
+++ b/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings	(date 1693159853868)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>PreviewsEnabled</key>
+	<false/>
+</dict>
+</plist>
Index: windows/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/.gitignore b/windows/.gitignore
new file mode 100644
--- /dev/null	(date 1693159854711)
+++ b/windows/.gitignore	(date 1693159854711)
@@ -0,0 +1,17 @@
+flutter/ephemeral/
+
+# Visual Studio user-specific files.
+*.suo
+*.user
+*.userosscache
+*.sln.docstates
+
+# Visual Studio build-related files.
+x64/
+x86/
+
+# Visual Studio cache files
+# files ending in .cache can be ignored
+*.[Cc]ache
+# but keep track of directories ending in .cache
+!*.[Cc]ache/
Index: windows/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/CMakeLists.txt b/windows/CMakeLists.txt
new file mode 100644
--- /dev/null	(date 1722940986912)
+++ b/windows/CMakeLists.txt	(date 1722940986912)
@@ -0,0 +1,108 @@
+# Project-level configuration.
+cmake_minimum_required(VERSION 3.14)
+project(hotel LANGUAGES CXX)
+
+# The name of the executable created for the application. Change this to change
+# the on-disk name of your application.
+set(BINARY_NAME "hotel")
+
+# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
+# versions of CMake.
+cmake_policy(VERSION 3.14...3.25)
+
+# Define build configuration option.
+get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
+if(IS_MULTICONFIG)
+  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
+    CACHE STRING "" FORCE)
+else()
+  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
+    set(CMAKE_BUILD_TYPE "Debug" CACHE
+      STRING "Flutter build mode" FORCE)
+    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
+      "Debug" "Profile" "Release")
+  endif()
+endif()
+# Define settings for the Profile build mode.
+set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
+set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
+set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
+set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")
+
+# Use Unicode for all projects.
+add_definitions(-DUNICODE -D_UNICODE)
+
+# Compilation settings that should be applied to most targets.
+#
+# Be cautious about adding new options here, as plugins use this function by
+# default. In most cases, you should add new options to specific targets instead
+# of modifying this function.
+function(APPLY_STANDARD_SETTINGS TARGET)
+  target_compile_features(${TARGET} PUBLIC cxx_std_17)
+  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
+  target_compile_options(${TARGET} PRIVATE /EHsc)
+  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
+  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
+endfunction()
+
+# Flutter library and tool build rules.
+set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
+add_subdirectory(${FLUTTER_MANAGED_DIR})
+
+# Application build; see runner/CMakeLists.txt.
+add_subdirectory("runner")
+
+
+# Generated plugin build rules, which manage building the plugins and adding
+# them to the application.
+include(flutter/generated_plugins.cmake)
+
+
+# === Installation ===
+# Support files are copied into place next to the executable, so that it can
+# run in place. This is done instead of making a separate bundle (as on Linux)
+# so that building and running from within Visual Studio will work.
+set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
+# Make the "install" step default, as it's required to run.
+set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
+if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
+  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
+endif()
+
+set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
+set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")
+
+install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
+  COMPONENT Runtime)
+
+install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
+  COMPONENT Runtime)
+
+install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
+  COMPONENT Runtime)
+
+if(PLUGIN_BUNDLED_LIBRARIES)
+  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
+    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
+    COMPONENT Runtime)
+endif()
+
+# Copy the native assets provided by the build.dart from all packages.
+set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/windows/")
+install(DIRECTORY "${NATIVE_ASSETS_DIR}"
+   DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
+   COMPONENT Runtime)
+
+# Fully re-copy the assets directory on each build to avoid having stale files
+# from a previous install.
+set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
+install(CODE "
+  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
+  " COMPONENT Runtime)
+install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
+  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)
+
+# Install the AOT library on non-Debug builds only.
+install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
+  CONFIGURATIONS Profile;Release
+  COMPONENT Runtime)
Index: windows/runner/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/CMakeLists.txt b/windows/runner/CMakeLists.txt
new file mode 100644
--- /dev/null	(date 1693159854783)
+++ b/windows/runner/CMakeLists.txt	(date 1693159854783)
@@ -0,0 +1,40 @@
+cmake_minimum_required(VERSION 3.14)
+project(runner LANGUAGES CXX)
+
+# Define the application target. To change its name, change BINARY_NAME in the
+# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
+# work.
+#
+# Any new source files that you add to the application should be added here.
+add_executable(${BINARY_NAME} WIN32
+  "flutter_window.cpp"
+  "main.cpp"
+  "utils.cpp"
+  "win32_window.cpp"
+  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
+  "Runner.rc"
+  "runner.exe.manifest"
+)
+
+# Apply the standard set of build settings. This can be removed for applications
+# that need different build settings.
+apply_standard_settings(${BINARY_NAME})
+
+# Add preprocessor definitions for the build version.
+target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
+target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
+target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
+target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
+target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")
+
+# Disable Windows macros that collide with C++ standard library functions.
+target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")
+
+# Add dependency libraries and include directories. Add any application-specific
+# dependencies here.
+target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
+target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
+target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")
+
+# Run the Flutter tool portions of the build. This must not be removed.
+add_dependencies(${BINARY_NAME} flutter_assemble)
Index: windows/runner/flutter_window.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/flutter_window.cpp b/windows/runner/flutter_window.cpp
new file mode 100644
--- /dev/null	(date 1693159854796)
+++ b/windows/runner/flutter_window.cpp	(date 1693159854796)
@@ -0,0 +1,71 @@
+#include "flutter_window.h"
+
+#include <optional>
+
+#include "flutter/generated_plugin_registrant.h"
+
+FlutterWindow::FlutterWindow(const flutter::DartProject& project)
+    : project_(project) {}
+
+FlutterWindow::~FlutterWindow() {}
+
+bool FlutterWindow::OnCreate() {
+  if (!Win32Window::OnCreate()) {
+    return false;
+  }
+
+  RECT frame = GetClientArea();
+
+  // The size here must match the window dimensions to avoid unnecessary surface
+  // creation / destruction in the startup path.
+  flutter_controller_ = std::make_unique<flutter::FlutterViewController>(
+      frame.right - frame.left, frame.bottom - frame.top, project_);
+  // Ensure that basic setup of the controller was successful.
+  if (!flutter_controller_->engine() || !flutter_controller_->view()) {
+    return false;
+  }
+  RegisterPlugins(flutter_controller_->engine());
+  SetChildContent(flutter_controller_->view()->GetNativeWindow());
+
+  flutter_controller_->engine()->SetNextFrameCallback([&]() {
+    this->Show();
+  });
+
+  // Flutter can complete the first frame before the "show window" callback is
+  // registered. The following call ensures a frame is pending to ensure the
+  // window is shown. It is a no-op if the first frame hasn't completed yet.
+  flutter_controller_->ForceRedraw();
+
+  return true;
+}
+
+void FlutterWindow::OnDestroy() {
+  if (flutter_controller_) {
+    flutter_controller_ = nullptr;
+  }
+
+  Win32Window::OnDestroy();
+}
+
+LRESULT
+FlutterWindow::MessageHandler(HWND hwnd, UINT const message,
+                              WPARAM const wparam,
+                              LPARAM const lparam) noexcept {
+  // Give Flutter, including plugins, an opportunity to handle window messages.
+  if (flutter_controller_) {
+    std::optional<LRESULT> result =
+        flutter_controller_->HandleTopLevelWindowProc(hwnd, message, wparam,
+                                                      lparam);
+    if (result) {
+      return *result;
+    }
+  }
+
+  switch (message) {
+    case WM_FONTCHANGE:
+      flutter_controller_->engine()->ReloadSystemFonts();
+      break;
+  }
+
+  return Win32Window::MessageHandler(hwnd, message, wparam, lparam);
+}
Index: windows/runner/flutter_window.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/flutter_window.h b/windows/runner/flutter_window.h
new file mode 100644
--- /dev/null	(date 1693159854812)
+++ b/windows/runner/flutter_window.h	(date 1693159854812)
@@ -0,0 +1,33 @@
+#ifndef RUNNER_FLUTTER_WINDOW_H_
+#define RUNNER_FLUTTER_WINDOW_H_
+
+#include <flutter/dart_project.h>
+#include <flutter/flutter_view_controller.h>
+
+#include <memory>
+
+#include "win32_window.h"
+
+// A window that does nothing but host a Flutter view.
+class FlutterWindow : public Win32Window {
+ public:
+  // Creates a new FlutterWindow hosting a Flutter view running |project|.
+  explicit FlutterWindow(const flutter::DartProject& project);
+  virtual ~FlutterWindow();
+
+ protected:
+  // Win32Window:
+  bool OnCreate() override;
+  void OnDestroy() override;
+  LRESULT MessageHandler(HWND window, UINT const message, WPARAM const wparam,
+                         LPARAM const lparam) noexcept override;
+
+ private:
+  // The project to run.
+  flutter::DartProject project_;
+
+  // The Flutter instance hosted by this window.
+  std::unique_ptr<flutter::FlutterViewController> flutter_controller_;
+};
+
+#endif  // RUNNER_FLUTTER_WINDOW_H_
Index: windows/runner/main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/main.cpp b/windows/runner/main.cpp
new file mode 100644
--- /dev/null	(date 1722940986947)
+++ b/windows/runner/main.cpp	(date 1722940986947)
@@ -0,0 +1,43 @@
+#include <flutter/dart_project.h>
+#include <flutter/flutter_view_controller.h>
+#include <windows.h>
+
+#include "flutter_window.h"
+#include "utils.h"
+
+int APIENTRY wWinMain(_In_ HINSTANCE instance, _In_opt_ HINSTANCE prev,
+                      _In_ wchar_t *command_line, _In_ int show_command) {
+  // Attach to console when present (e.g., 'flutter run') or create a
+  // new console when running with a debugger.
+  if (!::AttachConsole(ATTACH_PARENT_PROCESS) && ::IsDebuggerPresent()) {
+    CreateAndAttachConsole();
+  }
+
+  // Initialize COM, so that it is available for use in the library and/or
+  // plugins.
+  ::CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);
+
+  flutter::DartProject project(L"data");
+
+  std::vector<std::string> command_line_arguments =
+      GetCommandLineArguments();
+
+  project.set_dart_entrypoint_arguments(std::move(command_line_arguments));
+
+  FlutterWindow window(project);
+  Win32Window::Point origin(10, 10);
+  Win32Window::Size size(1280, 720);
+  if (!window.Create(L"hotel", origin, size)) {
+    return EXIT_FAILURE;
+  }
+  window.SetQuitOnClose(true);
+
+  ::MSG msg;
+  while (::GetMessage(&msg, nullptr, 0, 0)) {
+    ::TranslateMessage(&msg);
+    ::DispatchMessage(&msg);
+  }
+
+  ::CoUninitialize();
+  return EXIT_SUCCESS;
+}
Index: windows/runner/resource.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/resource.h b/windows/runner/resource.h
new file mode 100644
--- /dev/null	(date 1693159854848)
+++ b/windows/runner/resource.h	(date 1693159854848)
@@ -0,0 +1,16 @@
+//{{NO_DEPENDENCIES}}
+// Microsoft Visual C++ generated include file.
+// Used by Runner.rc
+//
+#define IDI_APP_ICON                    101
+
+// Next default values for new objects
+//
+#ifdef APSTUDIO_INVOKED
+#ifndef APSTUDIO_READONLY_SYMBOLS
+#define _APS_NEXT_RESOURCE_VALUE        102
+#define _APS_NEXT_COMMAND_VALUE         40001
+#define _APS_NEXT_CONTROL_VALUE         1001
+#define _APS_NEXT_SYMED_VALUE           101
+#endif
+#endif
Index: windows/runner/runner.exe.manifest
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/runner.exe.manifest b/windows/runner/runner.exe.manifest
new file mode 100644
--- /dev/null	(date 1693159854867)
+++ b/windows/runner/runner.exe.manifest	(date 1693159854867)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
+<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
+  <application xmlns="urn:schemas-microsoft-com:asm.v3">
+    <windowsSettings>
+      <dpiAwareness xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">PerMonitorV2</dpiAwareness>
+    </windowsSettings>
+  </application>
+  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
+    <application>
+      <!-- Windows 10 and Windows 11 -->
+      <supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"/>
+      <!-- Windows 8.1 -->
+      <supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}"/>
+      <!-- Windows 8 -->
+      <supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"/>
+      <!-- Windows 7 -->
+      <supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"/>
+    </application>
+  </compatibility>
+</assembly>
Index: windows/runner/Runner.rc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/Runner.rc b/windows/runner/Runner.rc
new file mode 100644
--- /dev/null	(date 1722940986955)
+++ b/windows/runner/Runner.rc	(date 1722940986955)
@@ -0,0 +1,121 @@
+// Microsoft Visual C++ generated resource script.
+//
+#pragma code_page(65001)
+#include "resource.h"
+
+#define APSTUDIO_READONLY_SYMBOLS
+/////////////////////////////////////////////////////////////////////////////
+//
+// Generated from the TEXTINCLUDE 2 resource.
+//
+#include "winres.h"
+
+/////////////////////////////////////////////////////////////////////////////
+#undef APSTUDIO_READONLY_SYMBOLS
+
+/////////////////////////////////////////////////////////////////////////////
+// English (United States) resources
+
+#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
+LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
+
+#ifdef APSTUDIO_INVOKED
+/////////////////////////////////////////////////////////////////////////////
+//
+// TEXTINCLUDE
+//
+
+1 TEXTINCLUDE
+BEGIN
+    "resource.h\0"
+END
+
+2 TEXTINCLUDE
+BEGIN
+    "#include ""winres.h""\r\n"
+    "\0"
+END
+
+3 TEXTINCLUDE
+BEGIN
+    "\r\n"
+    "\0"
+END
+
+#endif    // APSTUDIO_INVOKED
+
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Icon
+//
+
+// Icon with lowest ID value placed first to ensure application icon
+// remains consistent on all systems.
+IDI_APP_ICON            ICON                    "resources\\app_icon.ico"
+
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Version
+//
+
+#if defined(FLUTTER_VERSION_MAJOR) && defined(FLUTTER_VERSION_MINOR) && defined(FLUTTER_VERSION_PATCH) && defined(FLUTTER_VERSION_BUILD)
+#define VERSION_AS_NUMBER FLUTTER_VERSION_MAJOR,FLUTTER_VERSION_MINOR,FLUTTER_VERSION_PATCH,FLUTTER_VERSION_BUILD
+#else
+#define VERSION_AS_NUMBER 1,0,0,0
+#endif
+
+#if defined(FLUTTER_VERSION)
+#define VERSION_AS_STRING FLUTTER_VERSION
+#else
+#define VERSION_AS_STRING "1.0.0"
+#endif
+
+VS_VERSION_INFO VERSIONINFO
+ FILEVERSION VERSION_AS_NUMBER
+ PRODUCTVERSION VERSION_AS_NUMBER
+ FILEFLAGSMASK VS_FFI_FILEFLAGSMASK
+#ifdef _DEBUG
+ FILEFLAGS VS_FF_DEBUG
+#else
+ FILEFLAGS 0x0L
+#endif
+ FILEOS VOS__WINDOWS32
+ FILETYPE VFT_APP
+ FILESUBTYPE 0x0L
+BEGIN
+    BLOCK "StringFileInfo"
+    BEGIN
+        BLOCK "040904e4"
+        BEGIN
+            VALUE "CompanyName", "com.example" "\0"
+            VALUE "FileDescription", "hotel" "\0"
+            VALUE "FileVersion", VERSION_AS_STRING "\0"
+            VALUE "InternalName", "hotel" "\0"
+            VALUE "LegalCopyright", "Copyright (C) 2024 com.example. All rights reserved." "\0"
+            VALUE "OriginalFilename", "hotel.exe" "\0"
+            VALUE "ProductName", "hotel" "\0"
+            VALUE "ProductVersion", VERSION_AS_STRING "\0"
+        END
+    END
+    BLOCK "VarFileInfo"
+    BEGIN
+        VALUE "Translation", 0x409, 1252
+    END
+END
+
+#endif    // English (United States) resources
+/////////////////////////////////////////////////////////////////////////////
+
+
+
+#ifndef APSTUDIO_INVOKED
+/////////////////////////////////////////////////////////////////////////////
+//
+// Generated from the TEXTINCLUDE 3 resource.
+//
+
+
+/////////////////////////////////////////////////////////////////////////////
+#endif    // not APSTUDIO_INVOKED
Index: windows/runner/utils.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/utils.cpp b/windows/runner/utils.cpp
new file mode 100644
--- /dev/null	(date 1710086659274)
+++ b/windows/runner/utils.cpp	(date 1710086659274)
@@ -0,0 +1,65 @@
+#include "utils.h"
+
+#include <flutter_windows.h>
+#include <io.h>
+#include <stdio.h>
+#include <windows.h>
+
+#include <iostream>
+
+void CreateAndAttachConsole() {
+  if (::AllocConsole()) {
+    FILE *unused;
+    if (freopen_s(&unused, "CONOUT$", "w", stdout)) {
+      _dup2(_fileno(stdout), 1);
+    }
+    if (freopen_s(&unused, "CONOUT$", "w", stderr)) {
+      _dup2(_fileno(stdout), 2);
+    }
+    std::ios::sync_with_stdio();
+    FlutterDesktopResyncOutputStreams();
+  }
+}
+
+std::vector<std::string> GetCommandLineArguments() {
+  // Convert the UTF-16 command line arguments to UTF-8 for the Engine to use.
+  int argc;
+  wchar_t** argv = ::CommandLineToArgvW(::GetCommandLineW(), &argc);
+  if (argv == nullptr) {
+    return std::vector<std::string>();
+  }
+
+  std::vector<std::string> command_line_arguments;
+
+  // Skip the first argument as it's the binary name.
+  for (int i = 1; i < argc; i++) {
+    command_line_arguments.push_back(Utf8FromUtf16(argv[i]));
+  }
+
+  ::LocalFree(argv);
+
+  return command_line_arguments;
+}
+
+std::string Utf8FromUtf16(const wchar_t* utf16_string) {
+  if (utf16_string == nullptr) {
+    return std::string();
+  }
+  unsigned int target_length = ::WideCharToMultiByte(
+      CP_UTF8, WC_ERR_INVALID_CHARS, utf16_string,
+      -1, nullptr, 0, nullptr, nullptr)
+    -1; // remove the trailing null character
+  int input_length = (int)wcslen(utf16_string);
+  std::string utf8_string;
+  if (target_length == 0 || target_length > utf8_string.max_size()) {
+    return utf8_string;
+  }
+  utf8_string.resize(target_length);
+  int converted_length = ::WideCharToMultiByte(
+      CP_UTF8, WC_ERR_INVALID_CHARS, utf16_string,
+      input_length, utf8_string.data(), target_length, nullptr, nullptr);
+  if (converted_length == 0) {
+    return std::string();
+  }
+  return utf8_string;
+}
Index: windows/runner/utils.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/utils.h b/windows/runner/utils.h
new file mode 100644
--- /dev/null	(date 1693159854916)
+++ b/windows/runner/utils.h	(date 1693159854916)
@@ -0,0 +1,19 @@
+#ifndef RUNNER_UTILS_H_
+#define RUNNER_UTILS_H_
+
+#include <string>
+#include <vector>
+
+// Creates a console for the process, and redirects stdout and stderr to
+// it for both the runner and the Flutter library.
+void CreateAndAttachConsole();
+
+// Takes a null-terminated wchar_t* encoded in UTF-16 and returns a std::string
+// encoded in UTF-8. Returns an empty std::string on failure.
+std::string Utf8FromUtf16(const wchar_t* utf16_string);
+
+// Gets the command line arguments passed in as a std::vector<std::string>,
+// encoded in UTF-8. Returns an empty std::vector<std::string> on failure.
+std::vector<std::string> GetCommandLineArguments();
+
+#endif  // RUNNER_UTILS_H_
Index: windows/runner/win32_window.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/win32_window.cpp b/windows/runner/win32_window.cpp
new file mode 100644
--- /dev/null	(date 1693159854932)
+++ b/windows/runner/win32_window.cpp	(date 1693159854932)
@@ -0,0 +1,288 @@
+#include "win32_window.h"
+
+#include <dwmapi.h>
+#include <flutter_windows.h>
+
+#include "resource.h"
+
+namespace {
+
+/// Window attribute that enables dark mode window decorations.
+///
+/// Redefined in case the developer's machine has a Windows SDK older than
+/// version 10.0.22000.0.
+/// See: https://docs.microsoft.com/windows/win32/api/dwmapi/ne-dwmapi-dwmwindowattribute
+#ifndef DWMWA_USE_IMMERSIVE_DARK_MODE
+#define DWMWA_USE_IMMERSIVE_DARK_MODE 20
+#endif
+
+constexpr const wchar_t kWindowClassName[] = L"FLUTTER_RUNNER_WIN32_WINDOW";
+
+/// Registry key for app theme preference.
+///
+/// A value of 0 indicates apps should use dark mode. A non-zero or missing
+/// value indicates apps should use light mode.
+constexpr const wchar_t kGetPreferredBrightnessRegKey[] =
+  L"Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize";
+constexpr const wchar_t kGetPreferredBrightnessRegValue[] = L"AppsUseLightTheme";
+
+// The number of Win32Window objects that currently exist.
+static int g_active_window_count = 0;
+
+using EnableNonClientDpiScaling = BOOL __stdcall(HWND hwnd);
+
+// Scale helper to convert logical scaler values to physical using passed in
+// scale factor
+int Scale(int source, double scale_factor) {
+  return static_cast<int>(source * scale_factor);
+}
+
+// Dynamically loads the |EnableNonClientDpiScaling| from the User32 module.
+// This API is only needed for PerMonitor V1 awareness mode.
+void EnableFullDpiSupportIfAvailable(HWND hwnd) {
+  HMODULE user32_module = LoadLibraryA("User32.dll");
+  if (!user32_module) {
+    return;
+  }
+  auto enable_non_client_dpi_scaling =
+      reinterpret_cast<EnableNonClientDpiScaling*>(
+          GetProcAddress(user32_module, "EnableNonClientDpiScaling"));
+  if (enable_non_client_dpi_scaling != nullptr) {
+    enable_non_client_dpi_scaling(hwnd);
+  }
+  FreeLibrary(user32_module);
+}
+
+}  // namespace
+
+// Manages the Win32Window's window class registration.
+class WindowClassRegistrar {
+ public:
+  ~WindowClassRegistrar() = default;
+
+  // Returns the singleton registrar instance.
+  static WindowClassRegistrar* GetInstance() {
+    if (!instance_) {
+      instance_ = new WindowClassRegistrar();
+    }
+    return instance_;
+  }
+
+  // Returns the name of the window class, registering the class if it hasn't
+  // previously been registered.
+  const wchar_t* GetWindowClass();
+
+  // Unregisters the window class. Should only be called if there are no
+  // instances of the window.
+  void UnregisterWindowClass();
+
+ private:
+  WindowClassRegistrar() = default;
+
+  static WindowClassRegistrar* instance_;
+
+  bool class_registered_ = false;
+};
+
+WindowClassRegistrar* WindowClassRegistrar::instance_ = nullptr;
+
+const wchar_t* WindowClassRegistrar::GetWindowClass() {
+  if (!class_registered_) {
+    WNDCLASS window_class{};
+    window_class.hCursor = LoadCursor(nullptr, IDC_ARROW);
+    window_class.lpszClassName = kWindowClassName;
+    window_class.style = CS_HREDRAW | CS_VREDRAW;
+    window_class.cbClsExtra = 0;
+    window_class.cbWndExtra = 0;
+    window_class.hInstance = GetModuleHandle(nullptr);
+    window_class.hIcon =
+        LoadIcon(window_class.hInstance, MAKEINTRESOURCE(IDI_APP_ICON));
+    window_class.hbrBackground = 0;
+    window_class.lpszMenuName = nullptr;
+    window_class.lpfnWndProc = Win32Window::WndProc;
+    RegisterClass(&window_class);
+    class_registered_ = true;
+  }
+  return kWindowClassName;
+}
+
+void WindowClassRegistrar::UnregisterWindowClass() {
+  UnregisterClass(kWindowClassName, nullptr);
+  class_registered_ = false;
+}
+
+Win32Window::Win32Window() {
+  ++g_active_window_count;
+}
+
+Win32Window::~Win32Window() {
+  --g_active_window_count;
+  Destroy();
+}
+
+bool Win32Window::Create(const std::wstring& title,
+                         const Point& origin,
+                         const Size& size) {
+  Destroy();
+
+  const wchar_t* window_class =
+      WindowClassRegistrar::GetInstance()->GetWindowClass();
+
+  const POINT target_point = {static_cast<LONG>(origin.x),
+                              static_cast<LONG>(origin.y)};
+  HMONITOR monitor = MonitorFromPoint(target_point, MONITOR_DEFAULTTONEAREST);
+  UINT dpi = FlutterDesktopGetDpiForMonitor(monitor);
+  double scale_factor = dpi / 96.0;
+
+  HWND window = CreateWindow(
+      window_class, title.c_str(), WS_OVERLAPPEDWINDOW,
+      Scale(origin.x, scale_factor), Scale(origin.y, scale_factor),
+      Scale(size.width, scale_factor), Scale(size.height, scale_factor),
+      nullptr, nullptr, GetModuleHandle(nullptr), this);
+
+  if (!window) {
+    return false;
+  }
+
+  UpdateTheme(window);
+
+  return OnCreate();
+}
+
+bool Win32Window::Show() {
+  return ShowWindow(window_handle_, SW_SHOWNORMAL);
+}
+
+// static
+LRESULT CALLBACK Win32Window::WndProc(HWND const window,
+                                      UINT const message,
+                                      WPARAM const wparam,
+                                      LPARAM const lparam) noexcept {
+  if (message == WM_NCCREATE) {
+    auto window_struct = reinterpret_cast<CREATESTRUCT*>(lparam);
+    SetWindowLongPtr(window, GWLP_USERDATA,
+                     reinterpret_cast<LONG_PTR>(window_struct->lpCreateParams));
+
+    auto that = static_cast<Win32Window*>(window_struct->lpCreateParams);
+    EnableFullDpiSupportIfAvailable(window);
+    that->window_handle_ = window;
+  } else if (Win32Window* that = GetThisFromHandle(window)) {
+    return that->MessageHandler(window, message, wparam, lparam);
+  }
+
+  return DefWindowProc(window, message, wparam, lparam);
+}
+
+LRESULT
+Win32Window::MessageHandler(HWND hwnd,
+                            UINT const message,
+                            WPARAM const wparam,
+                            LPARAM const lparam) noexcept {
+  switch (message) {
+    case WM_DESTROY:
+      window_handle_ = nullptr;
+      Destroy();
+      if (quit_on_close_) {
+        PostQuitMessage(0);
+      }
+      return 0;
+
+    case WM_DPICHANGED: {
+      auto newRectSize = reinterpret_cast<RECT*>(lparam);
+      LONG newWidth = newRectSize->right - newRectSize->left;
+      LONG newHeight = newRectSize->bottom - newRectSize->top;
+
+      SetWindowPos(hwnd, nullptr, newRectSize->left, newRectSize->top, newWidth,
+                   newHeight, SWP_NOZORDER | SWP_NOACTIVATE);
+
+      return 0;
+    }
+    case WM_SIZE: {
+      RECT rect = GetClientArea();
+      if (child_content_ != nullptr) {
+        // Size and position the child window.
+        MoveWindow(child_content_, rect.left, rect.top, rect.right - rect.left,
+                   rect.bottom - rect.top, TRUE);
+      }
+      return 0;
+    }
+
+    case WM_ACTIVATE:
+      if (child_content_ != nullptr) {
+        SetFocus(child_content_);
+      }
+      return 0;
+
+    case WM_DWMCOLORIZATIONCOLORCHANGED:
+      UpdateTheme(hwnd);
+      return 0;
+  }
+
+  return DefWindowProc(window_handle_, message, wparam, lparam);
+}
+
+void Win32Window::Destroy() {
+  OnDestroy();
+
+  if (window_handle_) {
+    DestroyWindow(window_handle_);
+    window_handle_ = nullptr;
+  }
+  if (g_active_window_count == 0) {
+    WindowClassRegistrar::GetInstance()->UnregisterWindowClass();
+  }
+}
+
+Win32Window* Win32Window::GetThisFromHandle(HWND const window) noexcept {
+  return reinterpret_cast<Win32Window*>(
+      GetWindowLongPtr(window, GWLP_USERDATA));
+}
+
+void Win32Window::SetChildContent(HWND content) {
+  child_content_ = content;
+  SetParent(content, window_handle_);
+  RECT frame = GetClientArea();
+
+  MoveWindow(content, frame.left, frame.top, frame.right - frame.left,
+             frame.bottom - frame.top, true);
+
+  SetFocus(child_content_);
+}
+
+RECT Win32Window::GetClientArea() {
+  RECT frame;
+  GetClientRect(window_handle_, &frame);
+  return frame;
+}
+
+HWND Win32Window::GetHandle() {
+  return window_handle_;
+}
+
+void Win32Window::SetQuitOnClose(bool quit_on_close) {
+  quit_on_close_ = quit_on_close;
+}
+
+bool Win32Window::OnCreate() {
+  // No-op; provided for subclasses.
+  return true;
+}
+
+void Win32Window::OnDestroy() {
+  // No-op; provided for subclasses.
+}
+
+void Win32Window::UpdateTheme(HWND const window) {
+  DWORD light_mode;
+  DWORD light_mode_size = sizeof(light_mode);
+  LSTATUS result = RegGetValue(HKEY_CURRENT_USER, kGetPreferredBrightnessRegKey,
+                               kGetPreferredBrightnessRegValue,
+                               RRF_RT_REG_DWORD, nullptr, &light_mode,
+                               &light_mode_size);
+
+  if (result == ERROR_SUCCESS) {
+    BOOL enable_dark_mode = light_mode == 0;
+    DwmSetWindowAttribute(window, DWMWA_USE_IMMERSIVE_DARK_MODE,
+                          &enable_dark_mode, sizeof(enable_dark_mode));
+  }
+}
Index: windows/runner/win32_window.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/runner/win32_window.h b/windows/runner/win32_window.h
new file mode 100644
--- /dev/null	(date 1693159854947)
+++ b/windows/runner/win32_window.h	(date 1693159854947)
@@ -0,0 +1,102 @@
+#ifndef RUNNER_WIN32_WINDOW_H_
+#define RUNNER_WIN32_WINDOW_H_
+
+#include <windows.h>
+
+#include <functional>
+#include <memory>
+#include <string>
+
+// A class abstraction for a high DPI-aware Win32 Window. Intended to be
+// inherited from by classes that wish to specialize with custom
+// rendering and input handling
+class Win32Window {
+ public:
+  struct Point {
+    unsigned int x;
+    unsigned int y;
+    Point(unsigned int x, unsigned int y) : x(x), y(y) {}
+  };
+
+  struct Size {
+    unsigned int width;
+    unsigned int height;
+    Size(unsigned int width, unsigned int height)
+        : width(width), height(height) {}
+  };
+
+  Win32Window();
+  virtual ~Win32Window();
+
+  // Creates a win32 window with |title| that is positioned and sized using
+  // |origin| and |size|. New windows are created on the default monitor. Window
+  // sizes are specified to the OS in physical pixels, hence to ensure a
+  // consistent size this function will scale the inputted width and height as
+  // as appropriate for the default monitor. The window is invisible until
+  // |Show| is called. Returns true if the window was created successfully.
+  bool Create(const std::wstring& title, const Point& origin, const Size& size);
+
+  // Show the current window. Returns true if the window was successfully shown.
+  bool Show();
+
+  // Release OS resources associated with window.
+  void Destroy();
+
+  // Inserts |content| into the window tree.
+  void SetChildContent(HWND content);
+
+  // Returns the backing Window handle to enable clients to set icon and other
+  // window properties. Returns nullptr if the window has been destroyed.
+  HWND GetHandle();
+
+  // If true, closing this window will quit the application.
+  void SetQuitOnClose(bool quit_on_close);
+
+  // Return a RECT representing the bounds of the current client area.
+  RECT GetClientArea();
+
+ protected:
+  // Processes and route salient window messages for mouse handling,
+  // size change and DPI. Delegates handling of these to member overloads that
+  // inheriting classes can handle.
+  virtual LRESULT MessageHandler(HWND window,
+                                 UINT const message,
+                                 WPARAM const wparam,
+                                 LPARAM const lparam) noexcept;
+
+  // Called when CreateAndShow is called, allowing subclass window-related
+  // setup. Subclasses should return false if setup fails.
+  virtual bool OnCreate();
+
+  // Called when Destroy is called.
+  virtual void OnDestroy();
+
+ private:
+  friend class WindowClassRegistrar;
+
+  // OS callback called by message pump. Handles the WM_NCCREATE message which
+  // is passed when the non-client area is being created and enables automatic
+  // non-client DPI scaling so that the non-client area automatically
+  // responds to changes in DPI. All other messages are handled by
+  // MessageHandler.
+  static LRESULT CALLBACK WndProc(HWND const window,
+                                  UINT const message,
+                                  WPARAM const wparam,
+                                  LPARAM const lparam) noexcept;
+
+  // Retrieves a class instance pointer for |window|
+  static Win32Window* GetThisFromHandle(HWND const window) noexcept;
+
+  // Update the window frame's theme to match the system theme.
+  static void UpdateTheme(HWND const window);
+
+  bool quit_on_close_ = false;
+
+  // window handle for top level window.
+  HWND window_handle_ = nullptr;
+
+  // window handle for hosted content.
+  HWND child_content_ = nullptr;
+};
+
+#endif  // RUNNER_WIN32_WINDOW_H_
Index: windows/flutter/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/flutter/CMakeLists.txt b/windows/flutter/CMakeLists.txt
new file mode 100644
--- /dev/null	(date 1710086659274)
+++ b/windows/flutter/CMakeLists.txt	(date 1710086659274)
@@ -0,0 +1,109 @@
+# This file controls Flutter-level build steps. It should not be edited.
+cmake_minimum_required(VERSION 3.14)
+
+set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")
+
+# Configuration provided via flutter tool.
+include(${EPHEMERAL_DIR}/generated_config.cmake)
+
+# TODO: Move the rest of this into files in ephemeral. See
+# https://github.com/flutter/flutter/issues/57146.
+set(WRAPPER_ROOT "${EPHEMERAL_DIR}/cpp_client_wrapper")
+
+# Set fallback configurations for older versions of the flutter tool.
+if (NOT DEFINED FLUTTER_TARGET_PLATFORM)
+  set(FLUTTER_TARGET_PLATFORM "windows-x64")
+endif()
+
+# === Flutter Library ===
+set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")
+
+# Published to parent scope for install step.
+set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
+set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
+set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
+set(AOT_LIBRARY "${PROJECT_DIR}/build/windows/app.so" PARENT_SCOPE)
+
+list(APPEND FLUTTER_LIBRARY_HEADERS
+  "flutter_export.h"
+  "flutter_windows.h"
+  "flutter_messenger.h"
+  "flutter_plugin_registrar.h"
+  "flutter_texture_registrar.h"
+)
+list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
+add_library(flutter INTERFACE)
+target_include_directories(flutter INTERFACE
+  "${EPHEMERAL_DIR}"
+)
+target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
+add_dependencies(flutter flutter_assemble)
+
+# === Wrapper ===
+list(APPEND CPP_WRAPPER_SOURCES_CORE
+  "core_implementations.cc"
+  "standard_codec.cc"
+)
+list(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND "${WRAPPER_ROOT}/")
+list(APPEND CPP_WRAPPER_SOURCES_PLUGIN
+  "plugin_registrar.cc"
+)
+list(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND "${WRAPPER_ROOT}/")
+list(APPEND CPP_WRAPPER_SOURCES_APP
+  "flutter_engine.cc"
+  "flutter_view_controller.cc"
+)
+list(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND "${WRAPPER_ROOT}/")
+
+# Wrapper sources needed for a plugin.
+add_library(flutter_wrapper_plugin STATIC
+  ${CPP_WRAPPER_SOURCES_CORE}
+  ${CPP_WRAPPER_SOURCES_PLUGIN}
+)
+apply_standard_settings(flutter_wrapper_plugin)
+set_target_properties(flutter_wrapper_plugin PROPERTIES
+  POSITION_INDEPENDENT_CODE ON)
+set_target_properties(flutter_wrapper_plugin PROPERTIES
+  CXX_VISIBILITY_PRESET hidden)
+target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
+target_include_directories(flutter_wrapper_plugin PUBLIC
+  "${WRAPPER_ROOT}/include"
+)
+add_dependencies(flutter_wrapper_plugin flutter_assemble)
+
+# Wrapper sources needed for the runner.
+add_library(flutter_wrapper_app STATIC
+  ${CPP_WRAPPER_SOURCES_CORE}
+  ${CPP_WRAPPER_SOURCES_APP}
+)
+apply_standard_settings(flutter_wrapper_app)
+target_link_libraries(flutter_wrapper_app PUBLIC flutter)
+target_include_directories(flutter_wrapper_app PUBLIC
+  "${WRAPPER_ROOT}/include"
+)
+add_dependencies(flutter_wrapper_app flutter_assemble)
+
+# === Flutter tool backend ===
+# _phony_ is a non-existent file to force this command to run every time,
+# since currently there's no way to get a full input/output list from the
+# flutter tool.
+set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
+set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
+add_custom_command(
+  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
+    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
+    ${CPP_WRAPPER_SOURCES_APP}
+    ${PHONY_OUTPUT}
+  COMMAND ${CMAKE_COMMAND} -E env
+    ${FLUTTER_TOOL_ENVIRONMENT}
+    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
+      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
+  VERBATIM
+)
+add_custom_target(flutter_assemble DEPENDS
+  "${FLUTTER_LIBRARY}"
+  ${FLUTTER_LIBRARY_HEADERS}
+  ${CPP_WRAPPER_SOURCES_CORE}
+  ${CPP_WRAPPER_SOURCES_PLUGIN}
+  ${CPP_WRAPPER_SOURCES_APP}
+)
Index: windows/flutter/generated_plugins.cmake
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/flutter/generated_plugins.cmake b/windows/flutter/generated_plugins.cmake
new file mode 100644
--- /dev/null	(date 1722948801568)
+++ b/windows/flutter/generated_plugins.cmake	(date 1722948801568)
@@ -0,0 +1,26 @@
+#
+# Generated file, do not edit.
+#
+
+list(APPEND FLUTTER_PLUGIN_LIST
+  cloud_firestore
+  firebase_auth
+  firebase_core
+)
+
+list(APPEND FLUTTER_FFI_PLUGIN_LIST
+)
+
+set(PLUGIN_BUNDLED_LIBRARIES)
+
+foreach(plugin ${FLUTTER_PLUGIN_LIST})
+  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/windows plugins/${plugin})
+  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
+  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
+  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
+endforeach(plugin)
+
+foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
+  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/windows plugins/${ffi_plugin})
+  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
+endforeach(ffi_plugin)
Index: windows/flutter/generated_plugin_registrant.cc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/flutter/generated_plugin_registrant.cc b/windows/flutter/generated_plugin_registrant.cc
new file mode 100644
--- /dev/null	(date 1722948801566)
+++ b/windows/flutter/generated_plugin_registrant.cc	(date 1722948801566)
@@ -0,0 +1,20 @@
+//
+//  Generated file. Do not edit.
+//
+
+// clang-format off
+
+#include "generated_plugin_registrant.h"
+
+#include <cloud_firestore/cloud_firestore_plugin_c_api.h>
+#include <firebase_auth/firebase_auth_plugin_c_api.h>
+#include <firebase_core/firebase_core_plugin_c_api.h>
+
+void RegisterPlugins(flutter::PluginRegistry* registry) {
+  CloudFirestorePluginCApiRegisterWithRegistrar(
+      registry->GetRegistrarForPlugin("CloudFirestorePluginCApi"));
+  FirebaseAuthPluginCApiRegisterWithRegistrar(
+      registry->GetRegistrarForPlugin("FirebaseAuthPluginCApi"));
+  FirebaseCorePluginCApiRegisterWithRegistrar(
+      registry->GetRegistrarForPlugin("FirebaseCorePluginCApi"));
+}
Index: windows/flutter/generated_plugin_registrant.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/windows/flutter/generated_plugin_registrant.h b/windows/flutter/generated_plugin_registrant.h
new file mode 100644
--- /dev/null	(date 1722948801564)
+++ b/windows/flutter/generated_plugin_registrant.h	(date 1722948801564)
@@ -0,0 +1,15 @@
+//
+//  Generated file. Do not edit.
+//
+
+// clang-format off
+
+#ifndef GENERATED_PLUGIN_REGISTRANT_
+#define GENERATED_PLUGIN_REGISTRANT_
+
+#include <flutter/plugin_registry.h>
+
+// Registers Flutter plugins.
+void RegisterPlugins(flutter::PluginRegistry* registry);
+
+#endif  // GENERATED_PLUGIN_REGISTRANT_
Index: web/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/index.html b/web/index.html
new file mode 100644
--- /dev/null	(date 1722940986892)
+++ b/web/index.html	(date 1722940986892)
@@ -0,0 +1,59 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <!--
+    If you are serving your web app in a path other than the root, change the
+    href value below to reflect the base path you are serving from.
+
+    The path provided below has to start and end with a slash "/" in order for
+    it to work correctly.
+
+    For more details:
+    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
+
+    This is a placeholder for base href that will be replaced by the value of
+    the `--base-href` argument provided to `flutter build`.
+  -->
+  <base href="$FLUTTER_BASE_HREF">
+
+  <meta charset="UTF-8">
+  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
+  <meta name="description" content="A new Flutter project.">
+
+  <!-- iOS meta tags & icons -->
+  <meta name="apple-mobile-web-app-capable" content="yes">
+  <meta name="apple-mobile-web-app-status-bar-style" content="black">
+  <meta name="apple-mobile-web-app-title" content="hotel">
+  <link rel="apple-touch-icon" href="icons/Icon-192.png">
+
+  <!-- Favicon -->
+  <link rel="icon" type="image/png" href="favicon.png"/>
+
+  <title>hotel</title>
+  <link rel="manifest" href="manifest.json">
+
+  <script>
+    // The value below is injected by flutter build, do not touch.
+    const serviceWorkerVersion = null;
+  </script>
+  <!-- This script adds the flutter initialization JS code -->
+  <script src="flutter.js" defer></script>
+</head>
+<body>
+  <script>
+    window.addEventListener('load', function(ev) {
+      // Download main.dart.js
+      _flutter.loader.loadEntrypoint({
+        serviceWorker: {
+          serviceWorkerVersion: serviceWorkerVersion,
+        },
+        onEntrypointLoaded: function(engineInitializer) {
+          engineInitializer.initializeEngine().then(function(appRunner) {
+            appRunner.runApp();
+          });
+        }
+      });
+    });
+  </script>
+</body>
+</html>
Index: web/manifest.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/manifest.json b/web/manifest.json
new file mode 100644
--- /dev/null	(date 1722940986898)
+++ b/web/manifest.json	(date 1722940986898)
@@ -0,0 +1,35 @@
+{
+    "name": "hotel",
+    "short_name": "hotel",
+    "start_url": ".",
+    "display": "standalone",
+    "background_color": "#0175C2",
+    "theme_color": "#0175C2",
+    "description": "A new Flutter project.",
+    "orientation": "portrait-primary",
+    "prefer_related_applications": false,
+    "icons": [
+        {
+            "src": "icons/Icon-192.png",
+            "sizes": "192x192",
+            "type": "image/png"
+        },
+        {
+            "src": "icons/Icon-512.png",
+            "sizes": "512x512",
+            "type": "image/png"
+        },
+        {
+            "src": "icons/Icon-maskable-192.png",
+            "sizes": "192x192",
+            "type": "image/png",
+            "purpose": "maskable"
+        },
+        {
+            "src": "icons/Icon-maskable-512.png",
+            "sizes": "512x512",
+            "type": "image/png",
+            "purpose": "maskable"
+        }
+    ]
+}
Index: lib/const/const.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/const/const.dart b/lib/const/const.dart
new file mode 100644
--- /dev/null	(date 1722942694619)
+++ b/lib/const/const.dart	(date 1722942694619)
@@ -0,0 +1,14 @@
+import 'package:flutter/material.dart';
+
+import '../core/color.dart';
+
+
+class Const {
+  String appName = "Hotel Booking";
+  Icon appIcon = Icon(
+    Icons.accessibility_new_sharp,
+    color: ColorConstants.green,
+  );
+  String geciciAd = "Hello, Onur";
+
+}
Index: lib/controller/base/base_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/controller/base/base_controller.dart b/lib/controller/base/base_controller.dart
new file mode 100644
--- /dev/null	(date 1721719001290)
+++ b/lib/controller/base/base_controller.dart	(date 1721719001290)
@@ -0,0 +1,10 @@
+import '../server/api/server_controller.dart';
+
+class BaseController extends ServerController{
+  bool isLoading = false;
+  late String builderId;
+  void updateListeners({bool isLoading = false, String? builderId}){
+    this.isLoading = isLoading;
+    update([builderId ?? this.builderId]);
+  }
+}
\ No newline at end of file
Index: lib/controller/page/page_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/controller/page/page_controller.dart b/lib/controller/page/page_controller.dart
new file mode 100644
--- /dev/null	(date 1721744440824)
+++ b/lib/controller/page/page_controller.dart	(date 1721744440824)
@@ -0,0 +1,5 @@
+class PagesController{
+  int pageNumber(int index){
+    return index;
+  }
+}
\ No newline at end of file
Index: lib/controller/theme/theme_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/controller/theme/theme_controller.dart b/lib/controller/theme/theme_controller.dart
new file mode 100644
--- /dev/null	(date 1722431084325)
+++ b/lib/controller/theme/theme_controller.dart	(date 1722431084325)
@@ -0,0 +1,42 @@
+import 'package:flutter/material.dart';
+import '../../core/color.dart';
+import '../../core/text_styles.dart';
+import '../base/base_controller.dart';
+
+
+class ThemeController extends BaseController {
+  ThemeData get lightTheme => ThemeData(
+    fontFamily: 'Poppins',
+    useMaterial3: true,
+    colorScheme: ColorScheme(
+      brightness: Brightness.light,
+      primary: ColorConstants.primary,
+      onPrimary: ColorConstants.primary,
+      secondary: ColorConstants.black,
+      onSecondary: ColorConstants.black,
+      error: Colors.red,
+      onError: Colors.red,
+      surface: Colors.white,
+      onSurface: Colors.white,
+    ),
+    textTheme: TextTheme(
+      titleLarge: CustomTextStyles.titleLarge,
+      titleMedium: CustomTextStyles.titleMedium,
+      titleSmall: CustomTextStyles.titleSmall,
+      bodyLarge: CustomTextStyles.bodyLarge,
+      bodyMedium: CustomTextStyles.bodyMedium,
+      bodySmall: CustomTextStyles.bodySmall,
+      labelLarge: CustomTextStyles.labelLarge,
+      labelMedium: CustomTextStyles.labelMedium,
+      labelSmall: CustomTextStyles.labelSmall,
+    ),
+  );
+
+  @override
+  void onInit() {
+    builderId = 'themeController';
+    super.onInit();
+  }
+
+
+}
\ No newline at end of file
Index: lib/controller/server/api/server_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/controller/server/api/server_controller.dart b/lib/controller/server/api/server_controller.dart
new file mode 100644
--- /dev/null	(date 1722953178623)
+++ b/lib/controller/server/api/server_controller.dart	(date 1722953178623)
@@ -0,0 +1,30 @@
+import 'package:hotel/model/user_model.dart';
+import 'package:hotel/service/firestore_service.dart';
+import '../../../service/auth.dart';
+import '../../text_controller/text_controller.dart';
+import '../base/base_server_controller.dart';
+
+class ServerController extends BaseServerController {
+  AuthorizationService auth=AuthorizationService();
+  FireStoreService fireStore=FireStoreService();
+  TextControllers textControllers=TextControllers();
+
+newUser()async{
+  print(textControllers.newMailController.text);
+  print(textControllers.newPasswordController.text);
+  UserModel? user= await auth.createUser(textControllers.newMailController.text, textControllers.newPasswordController.text);
+  if(user!=null){
+  fireStore.saveUser(
+    id: user.id,
+    userName: textControllers.newNameController.text,
+    email: textControllers.newMailController.text,
+    photoUrl: "",
+    phoneNumber: user.phoneNumber).then((value)=>print("User saved to Firestore"));
+  }
+}
+
+signIn(){
+  auth.signIn(textControllers.mailController.text, textControllers.passwordController.text);
+}
+
+}
Index: lib/controller/server/base/base_server_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/controller/server/base/base_server_controller.dart b/lib/controller/server/base/base_server_controller.dart
new file mode 100644
--- /dev/null	(date 1721718546815)
+++ b/lib/controller/server/base/base_server_controller.dart	(date 1721718546815)
@@ -0,0 +1,7 @@
+import 'package:get/get.dart';
+
+class BaseServerController extends GetxController {
+  late int statusCode;
+  String? message = '';
+  bool hasError = false;
+}
Index: lib/controller/text_controller/text_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/controller/text_controller/text_controller.dart b/lib/controller/text_controller/text_controller.dart
new file mode 100644
--- /dev/null	(date 1722602200000)
+++ b/lib/controller/text_controller/text_controller.dart	(date 1722602200000)
@@ -0,0 +1,28 @@
+import 'package:flutter/material.dart';
+
+class TextControllers {
+  static final TextControllers _instance = TextControllers._internal();
+  factory TextControllers() => _instance;
+  TextControllers._internal();
+
+  //create new user
+  TextEditingController newMailController = TextEditingController();
+  TextEditingController newNameController = TextEditingController();
+  TextEditingController newPasswordController = TextEditingController();
+
+  //sign in user
+  TextEditingController mailController = TextEditingController();
+  TextEditingController passwordController = TextEditingController();
+
+  //forgot password
+  TextEditingController fPasswordController = TextEditingController();
+  TextEditingController refPasswordController = TextEditingController();
+
+  //edit profile
+  TextEditingController editFullName = TextEditingController();
+  TextEditingController editName = TextEditingController();
+  TextEditingController editBirthDay = TextEditingController();
+  TextEditingController editMail = TextEditingController();
+  TextEditingController editPhone = TextEditingController();
+  TextEditingController editGender = TextEditingController();
+}
Index: lib/controller/hotel_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/controller/hotel_controller.dart b/lib/controller/hotel_controller.dart
new file mode 100644
--- /dev/null	(date 1722944764279)
+++ b/lib/controller/hotel_controller.dart	(date 1722944764279)
@@ -0,0 +1,31 @@
+import 'package:get/get.dart';
+import '../model/otel_model.dart';
+import '../service/firestore_service.dart';
+
+class HotelController extends GetxController {
+  var hotels = <List>[].obs;
+  var recommendedHotels =<HotelModel>[].obs;
+  var popularHotels =<HotelModel>[].obs;
+  var trendingHotels =<HotelModel>[].obs;
+
+
+
+  @override
+  void onInit() {
+    super.onInit();
+    fetchHotels();
+  }
+
+  void fetchHotels() async {
+    List<HotelModel> hotelList = await FireStoreService().getHotelList();
+
+    recommendedHotels.assignAll(hotelList.sublist(0,7));
+    popularHotels.assignAll(hotelList.sublist(7,14));
+    trendingHotels.assignAll(hotelList.sublist(14,20));
+    hotels.add(recommendedHotels);
+    hotels.add(popularHotels);
+    hotels.add(trendingHotels);
+
+
+  }
+}
Index: lib/controller/option_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/controller/option_controller.dart b/lib/controller/option_controller.dart
new file mode 100644
--- /dev/null	(date 1722588626005)
+++ b/lib/controller/option_controller.dart	(date 1722588626005)
@@ -0,0 +1,9 @@
+import 'package:get/get.dart';
+
+class OptionsController extends GetxController {
+  var selectedIndex = 0.obs;
+
+  void selectIndex(int index) {
+    selectedIndex.value = index;
+  }
+}
Index: lib/core/icon.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/core/icon.dart b/lib/core/icon.dart
new file mode 100644
--- /dev/null	(date 1722941715544)
+++ b/lib/core/icon.dart	(date 1722941715544)
@@ -0,0 +1,8 @@
+import 'package:flutter/material.dart';
+import 'color.dart';
+
+class StaticIcons{
+  static Icon get email=> Icon(Icons.mail,color: ColorConstants.black);
+  static Icon get password=> Icon(Icons.lock,color: ColorConstants.black);
+
+}
\ No newline at end of file
Index: lib/core/color.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/core/color.dart b/lib/core/color.dart
new file mode 100644
--- /dev/null	(date 1722430300395)
+++ b/lib/core/color.dart	(date 1722430300395)
@@ -0,0 +1,16 @@
+import 'package:flutter/material.dart';
+
+class ColorConstants {
+  static Color primary = Colors.white;
+  static Color secondary = const Color(0xFFedd6c8);
+  static Color background = const Color(0xFFf9f2ed);
+  static Color lightPrimary = const Color(0xFFFFF0F0);
+  static Color black = Colors.black;
+  static Color grey = Colors.black12;
+  static Color red = Colors.red;
+  static Color green = const Color(0xFF2E7D32);
+  static Color greenLight = const Color(0xFF32E396);
+  static Color appBarColor= Colors.white;
+  static Color scaffoldColor= Colors.white;
+
+}
Index: lib/core/radius.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/core/radius.dart b/lib/core/radius.dart
new file mode 100644
--- /dev/null	(date 1721718127459)
+++ b/lib/core/radius.dart	(date 1721718127459)
@@ -0,0 +1,10 @@
+class CoffeeMillRadius {
+  static double get buttonRadius => 16.0;
+
+  static double get inputFieldRadius => 8.0;
+
+  static double get cardRadius => 16.0;
+
+  static double get dropDownButtonRadius => 8.0;
+  static double get categoryButtonRadius => 20.0;
+}
Index: lib/core/padding.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/core/padding.dart b/lib/core/padding.dart
new file mode 100644
--- /dev/null	(date 1722941715538)
+++ b/lib/core/padding.dart	(date 1722941715538)
@@ -0,0 +1,7 @@
+import 'package:flutter/material.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+
+class CoffeeMillPadding {
+  static EdgeInsetsGeometry get screenHorizontalPadding => 6.w.pH;
+}
Index: lib/core/text_styles.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/core/text_styles.dart b/lib/core/text_styles.dart
new file mode 100644
--- /dev/null	(date 1721718127364)
+++ b/lib/core/text_styles.dart	(date 1721718127364)
@@ -0,0 +1,21 @@
+import 'package:flutter/material.dart';
+
+class CustomTextStyles {
+  static TextStyle get titleLarge => const TextStyle(fontSize: 60);
+
+  static TextStyle get titleMedium => titleLarge.copyWith(fontSize: 48);
+
+  static TextStyle get titleSmall => titleLarge.copyWith(fontSize: 40);
+
+  static TextStyle get bodyLarge => const TextStyle(fontSize: 36);
+
+  static TextStyle get bodyMedium => bodyLarge.copyWith(fontSize: 32);
+
+  static TextStyle get bodySmall => bodyLarge.copyWith(fontSize: 24);
+
+  static TextStyle get labelLarge => const TextStyle(fontSize: 20);
+
+  static TextStyle get labelMedium => labelLarge.copyWith(fontSize: 16);
+
+  static TextStyle get labelSmall => labelLarge.copyWith(fontSize: 12);
+}
Index: lib/core/static_assets.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/core/static_assets.dart b/lib/core/static_assets.dart
new file mode 100644
--- /dev/null	(date 1722512207574)
+++ b/lib/core/static_assets.dart	(date 1722512207574)
@@ -0,0 +1,29 @@
+class StaticAssets {
+  static String get welcomeImage => 'assets/images/welcome_coffee.jpeg';
+  static String get dummyAvatar => 'assets/images/dummy_avatar.jpeg';
+  static String get coffeeNew => 'assets/images/coffee_new.jpeg';
+
+  static String get coffeeMillLogo => 'assets/images/coffee_mill_logo.png';
+  static String get favIcon => 'assets/icons/ic_fav.svg';
+  static String get noFavIcon => 'assets/icons/ic_no_fav.svg';
+  static String get home => 'assets/icons/ic_home.svg';
+  static String get noHome => 'assets/icons/ic_no_home.svg';
+  static String get profile => 'assets/icons/ic_profile.svg';
+  static String get noProfile => 'assets/icons/ic_no_profile.svg';
+  static String get search => 'assets/icons/ic_search.svg';
+  static String get filter => 'assets/icons/ic_filter.svg';
+
+
+
+  static List<String> get otherOptionButtonName =>["facebook","google","apple"];
+  static String getAssetAddr(int index){
+    return "assets/icons/${otherOptionButtonName[index]}.svg";
+  }
+
+  static String get forgotPassword => 'assets/icons/forgot_password.svg';
+  static String get sms => 'assets/icons/sms.svg';
+  static String get mail => 'assets/icons/mail.svg';
+  static String get verification=> 'assets/icons/verification.svg';
+
+
+}
Index: lib/enums/options_names.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/enums/options_names.dart b/lib/enums/options_names.dart
new file mode 100644
--- /dev/null	(date 1722588793163)
+++ b/lib/enums/options_names.dart	(date 1722588793163)
@@ -0,0 +1,1 @@
+enum OptionNames{recommended, popular, trending}
\ No newline at end of file
Index: lib/extentions/extentions.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/extentions/extentions.dart b/lib/extentions/extentions.dart
new file mode 100644
--- /dev/null	(date 1721650988870)
+++ b/lib/extentions/extentions.dart	(date 1721650988870)
@@ -0,0 +1,33 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+
+extension NumX on num {
+  double get h => (Get.height * this) / 100;
+
+  double get w => (Get.width * this) / 100;
+
+  //White Spaces//
+
+  // yh is meaning the vertical space (using screen height)
+  // yw is meaning the vertical space (using screen width)
+  SizedBox get yh => SizedBox(height: (Get.height * this) / 100);
+
+  SizedBox get yw => SizedBox(height: (Get.width * this) / 100);
+
+  // xh is meaning the horizontal space (using screen height)
+  // xw is meaning the horizontal space (using screen width)
+  SizedBox get xh => SizedBox(width: (Get.height * this) / 100);
+
+  SizedBox get xw => SizedBox(width: (Get.width * this) / 100);
+
+  //Paddings//
+  EdgeInsetsGeometry get pH => EdgeInsets.symmetric(horizontal: toDouble());
+
+  EdgeInsetsGeometry get pV => EdgeInsets.symmetric(vertical: toDouble());
+  EdgeInsetsGeometry get pLeft => EdgeInsets.only(left: toDouble());
+  EdgeInsetsGeometry get pTop => EdgeInsets.only(top: toDouble());
+  EdgeInsetsGeometry get pBottom => EdgeInsets.only(bottom: toDouble());
+  EdgeInsetsGeometry get pRight => EdgeInsets.only(right: toDouble());
+
+  EdgeInsetsGeometry get pAll => EdgeInsets.all(toDouble());
+}
\ No newline at end of file
Index: lib/model/otel_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/model/otel_model.dart b/lib/model/otel_model.dart
new file mode 100644
--- /dev/null	(date 1722943658756)
+++ b/lib/model/otel_model.dart	(date 1722943658756)
@@ -0,0 +1,59 @@
+import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:get/get.dart';
+
+class HotelModel extends GetxController{
+  final String id;
+  final String hotelName;
+  final String location;
+  final double perHour;
+  final double starRating;
+  final String coverPhoto;
+  final List<String> detailsPhotos;
+
+  HotelModel(
+      {required this.id,
+      required this.hotelName,
+      required this.location,
+      required this.perHour,
+      required this.starRating,
+      required this.coverPhoto,
+      required this.detailsPhotos});
+
+  Map<String, dynamic> toMap() {
+    return {
+      'id': id,
+      'hotelName': hotelName,
+      'location': location,
+      'perHour': perHour,
+      'starRating': starRating,
+      'coverPhoto': coverPhoto,
+      'detailsPhotos': detailsPhotos,
+    };
+  }
+
+  factory HotelModel.fromFirestore(DocumentSnapshot doc) {
+    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
+    return HotelModel(
+      id: doc.id,
+      hotelName: data['hotelName'] ?? '',
+      location: data['location'] ?? '',
+      perHour: data['perHour']?.toDouble() ?? 0.0,
+      starRating: data['starRating']?.toDouble() ?? 0.0,
+      coverPhoto: data['coverPhoto'] ?? '',
+      detailsPhotos: List<String>.from(data['detailsPhotos'] ?? []),
+    );
+  }
+
+  factory HotelModel.fromMap(Map<String, dynamic> data) {
+    return HotelModel(
+      id: data['id'],
+      hotelName: data['hotelName'],
+      location: data['location'],
+      perHour: data['perHour'],
+      starRating: data['starRating'],
+      coverPhoto: data['coverPhoto'],
+      detailsPhotos: List<String>.from(data['detailsPhotos']),
+    );
+  }
+
+}
Index: lib/model/user_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/model/user_model.dart b/lib/model/user_model.dart
new file mode 100644
--- /dev/null	(date 1722941917471)
+++ b/lib/model/user_model.dart	(date 1722941917471)
@@ -0,0 +1,64 @@
+import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:firebase_auth/firebase_auth.dart';
+class UserModel {
+
+  final String? id;
+  final String? fullName;
+  final String name;
+  final String? eMail;
+  final String birthDay;
+  final String? phoneNumber;
+  final String gender;
+  final String? photoUrl;
+
+  UserModel({required this.fullName,
+    required this.name,
+    required this.eMail,
+    required this.birthDay,
+    required this.phoneNumber,
+    required this.gender,
+    required this.photoUrl,
+    required this.id
+  });
+
+  factory UserModel.tofirebase(User? user) {
+    return UserModel(
+      id: user?.uid,
+      fullName: user?.displayName,
+      name: '',
+      eMail: user?.email,
+      phoneNumber: user?.phoneNumber,
+      birthDay: '',
+      gender: '',
+      photoUrl: user?.photoURL,
+
+    );
+  }
+
+  factory UserModel.todocument(DocumentSnapshot? doc) {
+    if (doc == null || doc.data() == null) {
+      return UserModel(
+          id: '',
+          fullName: '',
+          name: '',
+          eMail: '',
+          phoneNumber: '',
+          birthDay: '',
+          gender: '',
+          photoUrl: ''
+      );
+    }
+
+    var docData = doc.data() as Map<String, dynamic>;
+    return UserModel(
+      id: doc.id,
+      fullName: docData['fullName'] ?? '',
+      name: docData['name'] ?? '',
+      eMail: docData['eMail'] ?? '',
+      phoneNumber: docData['phoneNumber'] ?? '',
+      birthDay: docData['birthDay'] ?? '',
+      gender: docData['gender'] ?? '',
+      photoUrl: docData['photoUrl'] ?? '',
+    );
+  }
+}
Index: lib/model/setting_data.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/model/setting_data.dart b/lib/model/setting_data.dart
new file mode 100644
--- /dev/null	(date 1722941810596)
+++ b/lib/model/setting_data.dart	(date 1722941810596)
@@ -0,0 +1,118 @@
+import 'package:flutter/material.dart';
+import 'package:hotel/model/setting_option_model.dart';
+
+import '../core/color.dart';
+import '../pages/settings/edit_profile/edit_profile.dart';
+import '../pages/settings/language/language.dart';
+import '../pages/settings/notifications/notification_settings.dart';
+import '../widget/bottom_sheet/show_bottom_sheet.dart';
+
+class SettingData{
+
+  List<SettingOptionModel> settingList = [
+    SettingOptionModel(text: "Edit Profile",
+        leading: Icon(Icons.person,color: ColorConstants.black),
+        trailing: null,
+        textColor: ColorConstants.black,
+        onTap: (context){
+          Navigator.push(context, MaterialPageRoute(builder: (context) => const EditProfilePage(),));
+        }
+    ),
+    SettingOptionModel(text: "Notifications",
+        leading: Icon(Icons.notifications_none,color: ColorConstants.black),
+        trailing: null,
+        textColor: ColorConstants.black,
+        onTap: (context){
+          Navigator.push(context, MaterialPageRoute(builder: (context) => const NotificationSettings(),));
+        }
+    ),
+    SettingOptionModel(text: "Dark Theme",
+        leading: Icon(Icons.remove_red_eye,color: ColorConstants.black,),
+        trailing: Switch(
+          activeColor: ColorConstants.green,
+          inactiveTrackColor: ColorConstants.grey,
+          value: true,
+          onChanged: (value) {
+            value=!value;
+          },
+        ),
+        textColor: ColorConstants.black,
+        onTap: (context){
+
+        }
+    ),
+    SettingOptionModel(text: "Language",
+        leading: Icon(Icons.translate,color: ColorConstants.black),
+        trailing: null,
+        textColor: ColorConstants.black,
+        onTap: (context){
+          Navigator.push(context, MaterialPageRoute(builder: (context) => const Language(),));
+        }
+    ),
+    SettingOptionModel(text: "Help Center",
+        leading: Icon(Icons.help_outline,color: ColorConstants.black),
+        trailing: null,
+        textColor: ColorConstants.black,
+        onTap: (context){
+          Navigator.push(context, MaterialPageRoute(builder: (context) => const EditProfilePage(),));
+        }
+    ),
+    SettingOptionModel(text: "Privacy",
+        leading: Icon(Icons.privacy_tip_outlined,color: ColorConstants.black),
+        trailing: null,
+        textColor: ColorConstants.black,
+        onTap: (context){
+          Navigator.push(context, MaterialPageRoute(builder: (context) => const EditProfilePage(),));
+        }
+    ),
+    SettingOptionModel(text: "Rate HotelBooking",
+        leading: Icon(Icons.star_rate_outlined,color: ColorConstants.black),
+        trailing: null,
+        textColor: ColorConstants.black,
+        onTap: (context){
+          Navigator.push(context, MaterialPageRoute(builder: (context) => const EditProfilePage(),));
+        }
+    ),
+    SettingOptionModel(text: "Logout",
+        leading: Icon(Icons.logout,color: ColorConstants.red),
+        trailing: null,
+        textColor: ColorConstants.red,
+        onTap: (context){
+      ShowBottomSheet().bottomSheet(context);
+          // showModalBottomSheet<void>(
+          //   context: context,
+          //   builder: (BuildContext context) {
+          //     return SizedBox.expand(
+          //       child: Center(
+          //         child: Column(
+          //           mainAxisAlignment: MainAxisAlignment.center,
+          //           mainAxisSize: MainAxisSize.min,
+          //           children: <Widget>[
+          //             const Text('Modal bottom sheet'),
+          //             ElevatedButton(
+          //               child: const Text('Close'),
+          //               onPressed: () => Navigator.pop(context),
+          //             ),
+          //           ],
+          //         ),
+          //       ),
+          //     );
+          //   },
+          // );
+        }
+    ),
+  ];
+
+  List<String> notificationList=[
+    "General Notifications",
+    "Sound",
+    "Vibrate",
+    "App Updates",
+    "New Service Available",
+    "New Tips Available"
+  ];
+
+
+
+
+}
\ No newline at end of file
Index: lib/model/setting_option_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/model/setting_option_model.dart b/lib/model/setting_option_model.dart
new file mode 100644
--- /dev/null	(date 1722252200083)
+++ b/lib/model/setting_option_model.dart	(date 1722252200083)
@@ -0,0 +1,15 @@
+import 'package:flutter/material.dart';
+
+class SettingOptionModel {
+  final String text;
+  final Widget? trailing;
+  final Icon leading;
+  final Color textColor;
+  final Function (BuildContext) onTap;
+
+
+
+  SettingOptionModel(
+      {required this.text, required this.leading, required this.trailing,required this.textColor,required this.onTap});
+
+}
Index: lib/pages/settings/language/language.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/settings/language/language.dart b/lib/pages/settings/language/language.dart
new file mode 100644
--- /dev/null	(date 1722250075346)
+++ b/lib/pages/settings/language/language.dart	(date 1722250075346)
@@ -0,0 +1,23 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import '../../../core/color.dart';
+
+class Language extends StatelessWidget {
+  const Language({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+          title: Text(
+            "Language",
+            style:
+                Get.textTheme.bodyLarge!.copyWith(color: ColorConstants.black),
+          ),
+          iconTheme: IconThemeData(
+              color: ColorConstants.black
+          )
+      ),
+    );
+  }
+}
Index: lib/pages/settings/edit_profile/edit_profile.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/settings/edit_profile/edit_profile.dart b/lib/pages/settings/edit_profile/edit_profile.dart
new file mode 100644
--- /dev/null	(date 1722942290196)
+++ b/lib/pages/settings/edit_profile/edit_profile.dart	(date 1722942290196)
@@ -0,0 +1,103 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import '../../../controller/text_controller/text_controller.dart';
+import '../../../core/color.dart';
+import '../../../core/icon.dart';
+import '../../../widget/authentication_page/text_field/special_field.dart';
+
+
+class EditProfilePage extends StatelessWidget {
+  const EditProfilePage({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+        appBar: AppBar(
+          iconTheme: IconThemeData(color: ColorConstants.black),
+          title: Text(
+            "Edit Profile",
+            style:
+                Get.textTheme.bodyLarge!.copyWith(color: ColorConstants.black),
+          ),
+        ),
+        body: Padding(
+          padding: 16.pAll,
+          child: ListView(
+            children: [
+              SpecialField(
+                obscureText: false,
+                controller: TextControllers().editFullName,
+                hintText: "FullName",
+                prefix: StaticIcons.email,
+                suffix: StaticIcons.email,
+                keyboardType: TextInputType.name,
+              ),
+              2.yh,
+              SpecialField(
+                obscureText: false,
+                controller: TextControllers().editName,
+                hintText: "NickName",
+                prefix: StaticIcons.email,
+                suffix: StaticIcons.email,
+                keyboardType: TextInputType.name,
+              ),
+              2.yh,
+              SpecialField(
+                obscureText: false,
+                controller: TextControllers().editBirthDay,
+                hintText: "Date of Birth",
+                prefix: StaticIcons.email,
+                suffix: IconButton(
+                  icon: const Icon(Icons.date_range),
+                  onPressed: () {
+                    DatePickerDialog(
+                        firstDate: DateTime.now(), lastDate: DateTime.now());
+                  },
+                ),
+                keyboardType: TextInputType.datetime,
+              ),
+              2.yh,
+              SpecialField(
+                obscureText: false,
+                controller: TextControllers().editMail,
+                hintText: "E-mail",
+                prefix: StaticIcons.email,
+                suffix: StaticIcons.email,
+                keyboardType: TextInputType.emailAddress,
+              ),
+              2.yh,
+              SpecialField(
+                obscureText: false,
+                controller: TextControllers().editPhone,
+                hintText: "Phone Number",
+                prefix: StaticIcons.email,
+                suffix: StaticIcons.email,
+                keyboardType: TextInputType.phone,
+              ),
+              2.yh,
+              SpecialField(
+                obscureText: false,
+                controller: TextControllers().editGender,
+                hintText: "Gender",
+                prefix: StaticIcons.email,
+                suffix: StaticIcons.email,
+                keyboardType: TextInputType.multiline,
+              ),
+              Align(
+                alignment: Alignment.bottomCenter,
+                child: ElevatedButton(
+                  onPressed: () {},
+                  style: ButtonStyle(
+                    backgroundColor:
+                        MaterialStateProperty.all<Color>(ColorConstants.black),
+                  ),
+                  child: const Text("Update"),
+                ),
+              )
+            ],
+          ),
+        ));
+  }
+}
Index: lib/pages/settings/notifications/notification_settings.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/settings/notifications/notification_settings.dart b/lib/pages/settings/notifications/notification_settings.dart
new file mode 100644
--- /dev/null	(date 1722942290190)
+++ b/lib/pages/settings/notifications/notification_settings.dart	(date 1722942290190)
@@ -0,0 +1,56 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import '../../../core/color.dart';
+import '../../../model/setting_data.dart';
+
+class NotificationSettings extends StatefulWidget {
+  const NotificationSettings({super.key});
+
+  @override
+  State<NotificationSettings> createState() => _NotificationSettingsState();
+}
+
+class _NotificationSettingsState extends State<NotificationSettings> {
+  List<bool> switchValues = List.generate(8, (index) => false);
+
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+        iconTheme: IconThemeData(color: ColorConstants.black),
+        title: Text(
+          "Notifications",
+          style: Get.textTheme.bodySmall!.copyWith(color: ColorConstants.black),
+        ),
+      ),
+      body: ListView.builder(
+        itemCount: SettingData().notificationList.length,
+        itemBuilder: (context, index) => Padding(
+          padding: const EdgeInsets.all(8.0),
+          child: Row(
+            mainAxisAlignment: MainAxisAlignment.spaceBetween,
+            children: [
+              Text(
+                SettingData().notificationList[index],
+                style: Get.textTheme.labelLarge!.copyWith(
+                  color: ColorConstants.black,
+                ),
+              ),
+              Switch(
+                value: switchValues[index],
+                onChanged: (value) {
+                  setState(() {
+                    switchValues[index] = value;
+                  });
+                },
+                activeColor: ColorConstants.black,
+                inactiveThumbColor: Colors.grey,
+              ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/home_page/home_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/home_page/home_page.dart b/lib/pages/home_page/home_page.dart
new file mode 100644
--- /dev/null	(date 1722942290245)
+++ b/lib/pages/home_page/home_page.dart	(date 1722942290245)
@@ -0,0 +1,188 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import '../../const/const.dart';
+import '../../controller/option_controller.dart';
+import '../../core/color.dart';
+import '../../enums/options_names.dart';
+import '../../widget/home_page/name.dart';
+import '../../widget/home_page/option_button.dart';
+import '../../widget/home_page/room_list.dart';
+import '../../widget/home_page/search.dart';
+
+class HomePage extends StatelessWidget {
+  HomePage({super.key, required this.onButtonPressed});
+
+  final VoidCallback onButtonPressed;
+  final OptionsController controller = Get.put(OptionsController()); // Initialize the controller
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+        elevation: 0,
+        leading: Const().appIcon,
+        title: Text(
+          Const().appName,
+          textAlign: TextAlign.right,
+          style: Get.textTheme.bodyMedium!.copyWith(
+              color: ColorConstants.black, fontWeight: FontWeight.bold),
+        ),
+        actions: [
+          IconButton(
+              onPressed: () {
+              },
+              icon: const Icon(
+                Icons.notifications_none,
+                color: Colors.black,
+              )),
+          IconButton(
+              onPressed: () {},
+              icon: const Icon(
+                Icons.bookmark_border_outlined,
+                color: Colors.black,
+              )
+          ),
+        ],
+      ),
+      body: SingleChildScrollView(
+        child: Column(
+          crossAxisAlignment: CrossAxisAlignment.start,
+          children: [
+            Padding(
+              padding: 16.pLeft,
+              child: const HomePageName(),
+            ),
+            2.yh,
+            Padding(
+              padding: 12.pH,
+              child: const HomePageSearch(),
+            ),
+            //2.yh,
+          Center(
+            child: SizedBox(
+              height: 8.h,
+              child: ListView.builder(
+                scrollDirection: Axis.horizontal,
+                shrinkWrap: true,
+                padding: 12.pAll,
+                itemCount: OptionNames.values.length,
+                itemBuilder: (context, index) {
+                  return Padding(
+                    padding: 8.pH,
+                    child: OptionsButton(index: index),
+                  );
+                },
+              ),
+            ),
+          ),
+
+            const RoomList(),
+            Row(
+              mainAxisAlignment: MainAxisAlignment.spaceAround,
+              children: [
+                Text(
+                  "Recently Booked",
+                  style: Get.textTheme.bodySmall!
+                      .copyWith(color: ColorConstants.black),
+                ),
+                TextButton(
+                  onPressed: onButtonPressed,
+                  child: Text("See All",
+                      style: Get.textTheme.labelMedium!
+                          .copyWith(color: Colors.black)),
+                ),
+              ],
+            ),
+
+            //test için
+            const RecentlyBookedList(),
+          ],
+        ),
+      ),
+    );
+  }
+}
+
+class RecentlyBookedList extends StatelessWidget {
+  const RecentlyBookedList({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return Padding(
+      padding: 16.pH,
+      child: ListView.builder(
+        shrinkWrap: true,
+        physics: const NeverScrollableScrollPhysics(),
+        itemCount: 10,
+        itemBuilder: (context, index) => Padding(
+          padding: 8.pV,
+          child: Container(
+            decoration: BoxDecoration(
+                borderRadius: BorderRadius.circular(20), color: Colors.black12),
+            child: Padding(
+              padding: 16.pAll,
+              child: Row(
+                children: [
+                  ClipRRect(
+                    borderRadius: BorderRadius.circular(20),
+                    child: SizedBox(
+                      height: 30.w,
+                      width: 30.w,
+                      child: Image.asset(
+                        "assets/images/bridge.jpg",
+                        fit: BoxFit.cover,
+                      ),
+                    ),
+                  ),
+                  4.xw,
+                  Column(
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    mainAxisSize: MainAxisSize.min,
+                    children: [
+                      Text(
+                        "Otel Adı",
+                        style: Get.textTheme.labelLarge!
+                            .copyWith(color: ColorConstants.black),
+                      ),
+                      Text(
+                        "Ankara",
+                        style: Get.textTheme.labelMedium!
+                            .copyWith(color: ColorConstants.grey),
+                      ),
+                      Row(
+                        children: [
+                          const Icon(Icons.star),
+                          Text(
+                            "4.7(2.750 reviews)",
+                            style: Get.textTheme.labelSmall!
+                                .copyWith(color: ColorConstants.black),
+                          )
+                        ],
+                      ),
+                    ],
+                  ),
+                  4.xw,
+                  Column(
+                    crossAxisAlignment: CrossAxisAlignment.end,
+                    children: [
+                      Text(
+                        "4000TL\n/day",
+                        style: Get.textTheme.labelSmall!
+                            .copyWith(color: ColorConstants.black),
+                      ),
+                      IconButton(
+                          onPressed: () {},
+                          icon: const Icon(Icons.bookmark_border_outlined))
+                    ],
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/main_pages/main_pages.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/main_pages/main_pages.dart b/lib/pages/main_pages/main_pages.dart
new file mode 100644
--- /dev/null	(date 1722942290206)
+++ b/lib/pages/main_pages/main_pages.dart	(date 1722942290206)
@@ -0,0 +1,76 @@
+import 'package:flutter/material.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import '../booking_page/booking_page.dart';
+import '../home_page/home_page.dart';
+import '../profile_page/profile_page.dart';
+import '../search_page/search_page.dart';
+
+
+class MainPages extends StatefulWidget {
+  const MainPages({super.key});
+
+  @override
+  State<MainPages> createState() => _MainPagesState();
+}
+
+class _MainPagesState extends State<MainPages> {
+  int currentPageIndex = 0;
+
+
+  void changePage(int index) {
+    setState(() {
+      currentPageIndex = index;
+    });
+  }
+
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      body: <Widget>[
+        HomePage(
+            onButtonPressed: () => changePage(2)),
+         const SearchPage(),
+         const BookingPage(),
+         const ProfilePage(),
+      ][currentPageIndex],
+      bottomNavigationBar: NavigationBar(
+        labelBehavior: NavigationDestinationLabelBehavior.alwaysHide,
+        shadowColor: Colors.black,
+        indicatorColor: Colors.transparent,
+        surfaceTintColor: Colors.transparent,
+        height: 8.h,
+        onDestinationSelected: (int index) {
+          setState(() {
+            currentPageIndex = index;
+          });
+        },
+
+        selectedIndex: currentPageIndex,
+        destinations: const <Widget>[
+          NavigationDestination(
+            selectedIcon: Icon(Icons.home_rounded,color: Colors.green,size: 32,),
+            icon: Icon(Icons.home_outlined,color: Colors.grey,size: 32),
+            label: 'Home',
+          ),
+          NavigationDestination(
+            selectedIcon: Icon(Icons.search_rounded,color: Colors.green,size: 32),
+            icon: Icon(Icons.search_outlined,color: Colors.grey,size: 32),
+            label: 'Search',
+          ),
+          NavigationDestination(
+            selectedIcon: Icon(Icons.my_library_books_rounded,color: Colors.green,size: 32),
+            icon: Icon(Icons.my_library_books_outlined,color: Colors.grey,size: 32),
+            label: 'Booking',
+          ),
+          NavigationDestination(
+            selectedIcon: Icon(Icons.person_rounded,color: Colors.green,size: 32),
+            icon: Icon(Icons.person_outlined,color: Colors.grey,size: 32),
+            label: 'Profile',
+          ),
+        ],
+      ),
+    );
+  }
+}
Index: lib/pages/search_page/search_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/search_page/search_page.dart b/lib/pages/search_page/search_page.dart
new file mode 100644
--- /dev/null	(date 1722942290237)
+++ b/lib/pages/search_page/search_page.dart	(date 1722942290237)
@@ -0,0 +1,43 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+import '../../core/color.dart';
+import '../../widget/search_page/search_bar.dart';
+
+class SearchPage extends StatelessWidget {
+  const SearchPage({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+        automaticallyImplyLeading: false,
+        actions: [
+          IconButton(
+            onPressed: () {},
+            icon: Icon(
+              Icons.clear,
+              color: ColorConstants.black,
+            ),
+          ),
+        ],
+        titleSpacing: 0,
+        title: const SearchAppBar(),
+      ),
+      body: Padding(
+        padding: 8.pAll,
+        child: Column(
+          children: [
+            Text(
+              "Recent",
+              style:
+                  Get.textTheme.headlineLarge!.copyWith(color: ColorConstants.black),
+            )
+          ],
+        ),
+      ),
+    );
+  }
+}
+
+
Index: lib/pages/booking_page/booking_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/booking_page/booking_page.dart b/lib/pages/booking_page/booking_page.dart
new file mode 100644
--- /dev/null	(date 1722942290219)
+++ b/lib/pages/booking_page/booking_page.dart	(date 1722942290219)
@@ -0,0 +1,26 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+
+import '../../core/color.dart';
+
+class BookingPage extends StatelessWidget {
+  const BookingPage({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+        leading: const Icon(
+          Icons.accessibility,
+          color: Colors.black,
+        ),
+        automaticallyImplyLeading: false,
+        title: Text(
+          "My Booking",
+          style: Get.textTheme.bodyMedium!.copyWith(
+              color: ColorConstants.black, fontWeight: FontWeight.bold),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/profile_page/profile_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile_page/profile_page.dart b/lib/pages/profile_page/profile_page.dart
new file mode 100644
--- /dev/null	(date 1722948111497)
+++ b/lib/pages/profile_page/profile_page.dart	(date 1722948111497)
@@ -0,0 +1,45 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+import '../../core/color.dart';
+import '../../widget/profile_page/profile_details.dart';
+import '../../widget/profile_page/settings.dart';
+
+class ProfilePage extends StatelessWidget {
+  const ProfilePage({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+        automaticallyImplyLeading: false,
+        title: Text(
+          "Profile",
+          style: Get.textTheme.bodySmall!.copyWith(color: ColorConstants.black),
+        ),
+        leading: Icon(
+          Icons.accessibility_new_outlined,
+          color: ColorConstants.black,
+        ),
+      ),
+      body: SingleChildScrollView(
+        child: Column(
+          children: [
+            Padding(
+              padding: 8.pH,
+              child: ProfileDetails(),
+            ),
+            2.yh,
+            Divider(
+              color: ColorConstants.black,
+            ),
+            Padding(
+              padding: 8.pH,
+              child: const Settings(),
+            )
+          ],
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/welcome_page/welcome_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/welcome_page/welcome_page.dart b/lib/pages/welcome_page/welcome_page.dart
new file mode 100644
--- /dev/null	(date 1722942290186)
+++ b/lib/pages/welcome_page/welcome_page.dart	(date 1722942290186)
@@ -0,0 +1,70 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import '../../core/color.dart';
+import '../onboarding_page/onboarding_page.dart';
+
+
+class WelcomePage extends StatelessWidget {
+  const WelcomePage({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+        body: Stack(children: [
+      SizedBox(
+          height: 100.h,
+          width: 100.w,
+          child: Image.asset(
+            "assets/images/sunsett.jpg",
+            fit: BoxFit.cover,
+          )),
+      Positioned(
+          bottom: 8.h,
+          left: 8.w,
+          right: 12.w,
+          child: Column(
+            mainAxisAlignment: MainAxisAlignment.center,
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: [
+              Text(
+                "Welcome to",
+                style: Get.theme.textTheme.bodyLarge!.copyWith(
+                  color: ColorConstants.primary,
+                ),
+              ),
+              2.yh,
+              Text(
+                "Hotel Booking",
+                style: Get.theme.textTheme.titleSmall!.copyWith(color: ColorConstants.green, fontWeight: FontWeight.bold),
+              ),
+              2.yh,
+              Text(
+                "The best hotel booking in this century to accompany your vacation",
+                style: Get.theme.textTheme.labelSmall!,
+              ),
+            ],
+          )),
+      Align(
+        alignment: Alignment.bottomRight,
+        child: IconButton(
+            onPressed: () {
+              //HotelUploader().addHotelsToFirestore();
+              Navigator.push(
+                  context,
+                  MaterialPageRoute(
+                    builder: (context) => const OnboardingPage(),
+                  ));
+            },
+            icon: Icon(
+              Icons.navigate_next,
+              size: 48,
+              color: ColorConstants.primary,
+            )),
+      )
+    ]
+        )
+    );
+  }
+}
Index: assets/icons/sms.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/icons/sms.svg b/assets/icons/sms.svg
new file mode 100644
--- /dev/null	(date 1721902691465)
+++ b/assets/icons/sms.svg	(date 1721902691465)
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
+<svg width="800px" height="800px" viewBox="0 0 1024 1024" class="icon"  version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M789.333333 832H234.666667l-128 128V234.666667c0-70.4 57.6-128 128-128h554.666666c70.4 0 128 57.6 128 128v469.333333c0 70.4-57.6 128-128 128z" fill="#009688" /><path d="M512 469.333333m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z" fill="#FFFFFF" /><path d="M725.333333 469.333333m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z" fill="#FFFFFF" /><path d="M298.666667 469.333333m-64 0a64 64 0 1 0 128 0 64 64 0 1 0-128 0Z" fill="#FFFFFF" /></svg>
\ No newline at end of file
Index: lib/pages/dataset2.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/dataset2.dart b/lib/pages/dataset2.dart
new file mode 100644
--- /dev/null	(date 1722933333260)
+++ b/lib/pages/dataset2.dart	(date 1722933333260)
@@ -0,0 +1,290 @@
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+class HotelUploader {
+  List<Map<String, dynamic>> hotels = [
+    {
+      "id": "20241",
+      "hotelName": "Güzel Otel",
+      "location": "İstanbul",
+      "perHour": 50,
+      "starRating": 4.5,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/coverphoto7.jpg?alt=media&token=7291f8ee-af12-4511-89db-6d0ab963ff64",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261"
+      ]
+    },
+    {
+      "id": "20242",
+      "hotelName": "Deluxe Hotel",
+      "location": "Antalya",
+      "perHour": 75,
+      "starRating": 4.7,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54"
+      ]
+    },
+    {
+      "id": "20243",
+      "hotelName": "Royal Palace",
+      "location": "Ankara",
+      "perHour": 60,
+      "starRating": 4.3,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99"
+      ]
+    },
+    {
+      "id": "20244",
+      "hotelName": "Paradise Resort",
+      "location": "Muğla",
+      "perHour": 80,
+      "starRating": 4.9,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/coverphoto7.jpg?alt=media&token=7291f8ee-af12-4511-89db-6d0ab963ff64",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54"
+      ]
+    },
+    {
+      "id": "20245",
+      "hotelName": "Sunny Beach Hotel",
+      "location": "İzmir",
+      "perHour": 55,
+      "starRating": 4.4,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c"
+      ]
+    },
+    {
+      "id": "20246",
+      "hotelName": "Luxury Inn",
+      "location": "Bursa",
+      "perHour": 65,
+      "starRating": 4.6,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54"
+      ]
+    },
+    {
+      "id": "20247",
+      "hotelName": "Mountain View Hotel",
+      "location": "Kayseri",
+      "perHour": 70,
+      "starRating": 4.2,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c"
+      ]
+    },
+    {
+      "id": "20248",
+      "hotelName": "City Center Hotel",
+      "location": "İstanbul",
+      "perHour": 60,
+      "starRating": 4.5,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c"
+      ]
+    },
+    {
+      "id": "20249",
+      "hotelName": "Seaside Inn",
+      "location": "Antalya",
+      "perHour": 75,
+      "starRating": 4.8,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261"
+      ]
+    },
+    {
+      "id": "202410",
+      "hotelName": "Garden Hotel",
+      "location": "Adana",
+      "perHour": 50,
+      "starRating": 4.3,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54"
+      ]
+    },
+    {
+      "id": "202411",
+      "hotelName": "Historic Hotel",
+      "location": "Ankara",
+      "perHour": 65,
+      "starRating": 4.5,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c"
+      ]
+    },
+    {
+      "id": "202412",
+      "hotelName": "Ocean View Hotel",
+      "location": "Muğla",
+      "perHour": 80,
+      "starRating": 4.7,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261"
+      ]
+    },
+    {
+      "id": "202413",
+      "hotelName": "Boutique Hotel",
+      "location": "İzmir",
+      "perHour": 55,
+      "starRating": 4.4,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99"
+      ]
+    },
+    {
+      "id": "202414",
+      "hotelName": "Grand Hotel",
+      "location": "Bursa",
+      "perHour": 65,
+      "starRating": 4.6,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c"
+      ]
+    },
+    {
+      "id": "202415",
+      "hotelName": "Elegant Hotel",
+      "location": "Kayseri",
+      "perHour": 70,
+      "starRating": 4.2,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54"
+      ]
+    },
+    {
+      "id": "202416",
+      "hotelName": "Downtown Hotel",
+      "location": "İstanbul",
+      "perHour": 60,
+      "starRating": 4.5,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99"
+      ]
+    },
+    {
+      "id": "202417",
+      "hotelName": "Coastal Hotel",
+      "location": "Antalya",
+      "perHour": 75,
+      "starRating": 4.8,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c"
+      ]
+    },
+    {
+      "id": "202418",
+      "hotelName": "Forest Hotel",
+      "location": "Adana",
+      "perHour": 50,
+      "starRating": 4.3,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54"
+      ]
+    },
+    {
+      "id": "202419",
+      "hotelName": "Historic Palace",
+      "location": "Ankara",
+      "perHour": 65,
+      "starRating": 4.5,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c"
+      ]
+    },
+    {
+      "id": "202420",
+      "hotelName": "Seaside Resort",
+      "location": "Muğla",
+      "perHour": 80,
+      "starRating": 4.7,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto6.jpg?alt=media&token=8375dc54-aded-47a6-bb64-9dcbe2a8005c",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261"
+      ]
+    },
+    {
+      "id": "202421",
+      "hotelName": "Urban Hotel",
+      "location": "İzmir",
+      "perHour": 55,
+      "starRating": 4.4,
+      "coverPhoto": "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto1.jpg?alt=media&token=27ada8e1-6f49-4e4c-bf14-d79406505d54",
+      "detailsPhotos": [
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto2.jpg?alt=media&token=f1896bda-9b9e-4481-8502-1dca3d665261",
+        "https://firebasestorage.googleapis.com/v0/b/hotelbooking-679f4.appspot.com/o/otelphoto3.jpg?alt=media&token=104ff244-5c09-4df0-a318-07030b04ea99"
+      ]
+    }
+  ];
+
+  final firestore = FirebaseFirestore.instance;
+
+  Future<void> addHotelsToFirestore({int startIndex = 0, int endIndex = 10}) async {
+
+
+    WriteBatch batch = firestore.batch();
+
+    for (var i = startIndex; i <= endIndex && i < hotels.length; i++) {
+      var hotel = hotels[i];
+      var docRef = firestore.collection('hotels').doc(hotel['id']);
+      batch.set(docRef, hotel);
+    }
+
+    await batch.commit();
+  }
+
+  Future<void> addToFirebase()async{
+    for(int i =0;i<hotels.length;i++){
+      var hotel =hotels[i];
+      await firestore.collection("hotels").doc(hotel['id']).set({
+        "id": hotel["id"],
+        "hotelName": hotel["hotelName"],
+        "location": hotel["location"],
+        "perHour":hotel["perHour"],
+        "starRating": hotel["starRating"],
+        "coverPhoto": hotel["coverPhoto"],
+        "detailsPhotos": hotel["detailsPhotos"]
+      });
+    }
+  }
+}
+
Index: assets/icons/apple.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/icons/apple.svg b/assets/icons/apple.svg
new file mode 100644
--- /dev/null	(date 1721822049709)
+++ b/assets/icons/apple.svg	(date 1721822049709)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 32 32" width="64" height="64"><g transform="matrix(.036771 0 0 .036771 3 0)"><defs><path id="A" d="M0 0h708.7v870.3H0z"/><path id="B" d="M591.8 462.4c-1-110.1 90-163 94.1-165.6-51.2-74.9-130.8-85.1-159.2-86.3-67.7-6.9-132.2 39.9-166.6 39.9s-87.4-38.9-143.6-37.8c-73.9 1.1-142 42.9-180.1 109.1-76.7 133-19.6 330.3 55.2 438.4 36.6 52.8 80.1 112.3 137.4 110.1 55.2-2.2 76-35.7 142.6-35.7s85.4 35.7 143.6 34.6c59.3-1.2 96.9-54 133.2-107 41.9-61.3 59.2-120.7 60.2-123.8-1.3-.5-115.6-44.3-116.8-175.9"/></defs><clipPath id="C"><use xlink:href="#A"/></clipPath><g clip-path="url(#C)"><use xlink:href="#B"/></g><path d="M482.3 139c30.4-36.8 50.9-88 45.3-139-43.8 1.8-96.8 29.2-128.2 66-28.1 32.5-52.8 84.6-46.1 134.6 48.7 3.8 98.6-24.9 129-61.6"/></g><g clip-path="url(#C)" transform="matrix(.098524 0 0 .098524 89.579758 -18.770519)"><use xlink:href="#B"/></g><path d="M137.098-5.076c2.995-3.626 5.015-8.67 4.463-13.695-4.315.177-9.537 2.877-12.63 6.503-2.77 3.202-5.202 8.335-4.542 13.26 4.798.374 9.714-2.453 12.71-6.07"/><path d="M185.7 37.457l-4.966 15.045h-6.384l16.247-47.824h7.448l16.316 47.824h-6.6l-5.113-15.045zm15.685-4.828l-4.68-13.764c-1.064-3.123-1.773-5.96-2.483-8.73h-.138l-2.414 8.66L187 32.63z" enable-background="new "/><path d="M219.208 29.368c0-4.394-.138-7.95-.286-11.212h5.606l.286 5.892h.138c2.552-4.187 6.6-6.67 12.207-6.67 8.306 0 14.542 7.025 14.542 17.458 0 12.345-7.517 18.444-15.606 18.444-4.542 0-8.512-2-10.572-5.4h-.138v18.66h-6.177zm6.168 9.153c0 .926.138 1.773.286 2.552 1.133 4.325 4.897 7.3 9.37 7.3 6.6 0 10.434-5.4 10.434-13.27 0-6.887-3.616-12.77-10.217-12.77-4.256 0-8.227 3.054-9.44 7.734-.217.778-.424 1.704-.424 2.552v5.892zm32.778-9.153c0-4.394-.138-7.95-.286-11.212h5.606l.286 5.892h.138c2.552-4.187 6.6-6.67 12.207-6.67 8.306 0 14.542 7.025 14.542 17.458 0 12.345-7.517 18.444-15.606 18.444-4.542 0-8.512-2-10.572-5.4h-.138v18.66h-6.177zm6.177 9.153c0 .926.138 1.773.286 2.552 1.133 4.325 4.897 7.3 9.37 7.3 6.6 0 10.434-5.4 10.434-13.27 0-6.887-3.616-12.77-10.217-12.77-4.256 0-8.227 3.054-9.44 7.734-.217.778-.424 1.704-.424 2.552v5.892zM297.1 2.126h6.246V52.5H297.1zm18.8 34.336c.138 8.444 5.537 11.92 11.774 11.92 4.473 0 7.163-.778 9.508-1.773l1.064 4.473c-2.197.995-5.96 2.128-11.42 2.128-10.572 0-16.887-6.956-16.887-17.3s6.1-18.523 16.1-18.523c11.212 0 14.187 9.862 14.187 16.178 0 1.28-.138 2.266-.217 2.906zm18.306-4.473c.07-3.97-1.635-10.148-8.66-10.148-6.315 0-9.084 5.823-9.577 10.148z" enable-background="new "/></svg>
\ No newline at end of file
Index: assets/icons/mail.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/icons/mail.svg b/assets/icons/mail.svg
new file mode 100644
--- /dev/null	(date 1721903223381)
+++ b/assets/icons/mail.svg	(date 1721903223381)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
+<svg width="800px" height="800px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M3 8L8.44992 11.6333C9.73295 12.4886 10.3745 12.9163 11.0678 13.0825C11.6806 13.2293 12.3194 13.2293 12.9322 13.0825C13.6255 12.9163 14.2671 12.4886 15.5501 11.6333L21 8M6.2 19H17.8C18.9201 19 19.4802 19 19.908 18.782C20.2843 18.5903 20.5903 18.2843 20.782 17.908C21 17.4802 21 16.9201 21 15.8V8.2C21 7.0799 21 6.51984 20.782 6.09202C20.5903 5.71569 20.2843 5.40973 19.908 5.21799C19.4802 5 18.9201 5 17.8 5H6.2C5.0799 5 4.51984 5 4.09202 5.21799C3.71569 5.40973 3.40973 5.71569 3.21799 6.09202C3 6.51984 3 7.07989 3 8.2V15.8C3 16.9201 3 17.4802 3.21799 17.908C3.40973 18.2843 3.71569 18.5903 4.09202 18.782C4.51984 19 5.07989 19 6.2 19Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
Index: lib/pages/authentication/login_page/login_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/authentication/login_page/login_page.dart b/lib/pages/authentication/login_page/login_page.dart
new file mode 100644
--- /dev/null	(date 1722942290229)
+++ b/lib/pages/authentication/login_page/login_page.dart	(date 1722942290229)
@@ -0,0 +1,145 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import 'package:sign_in_button/sign_in_button.dart';
+
+import '../../../core/color.dart';
+import '../../../widget/authentication_page/divider_with_text.dart';
+import '../../main_pages/main_pages.dart';
+
+
+class LoginPage extends StatelessWidget {
+  const LoginPage({
+    super.key,
+    required PageController pageController,
+  }) : _pageController = pageController;
+
+  void _showButtonPressDialog(BuildContext context, String provider) {
+    ScaffoldMessenger.of(context).showSnackBar(
+      SnackBar(
+        content: Text('$provider Button Pressed!'),
+        backgroundColor: Colors.black26,
+        duration: const Duration(milliseconds: 400),
+      ),
+    );
+  }
+
+  final PageController _pageController;
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      body: Stack(
+        children: [
+          Padding(
+            padding: 12.pH,
+            child: Column(
+              mainAxisAlignment: MainAxisAlignment.center,
+              crossAxisAlignment: CrossAxisAlignment.stretch,
+              children: [
+                Text(
+                  "Lets you in",
+                  textAlign: TextAlign.center,
+                  style: Get.textTheme.titleSmall!
+                      .copyWith(color: ColorConstants.black),
+                ),
+                SignInButton(
+                  Buttons.facebook,
+                  onPressed: () {
+                    _showButtonPressDialog(context, 'Facebook');
+                    Navigator.push(
+                      context,
+                      MaterialPageRoute(
+                        builder: (context) => const MainPages(),
+                      ),
+                    );
+                  },
+                ),
+                4.yh,
+                SignInButton(
+                  Buttons.google,
+                  onPressed: () {
+                    _showButtonPressDialog(context, 'Google');
+                    Navigator.push(
+                      context,
+                      MaterialPageRoute(
+                        builder: (context) => const MainPages(),
+                      ),
+                    );
+                  },
+                ),
+                4.yh,
+                SignInButton(
+                  Buttons.apple,
+                  onPressed: () {
+                    _showButtonPressDialog(context, 'Apple');
+                    Navigator.push(
+                      context,
+                      MaterialPageRoute(
+                        builder: (context) => const MainPages(),
+                      ),
+                    );
+                  },
+                ),
+                const DividerWithText(
+                  text: 'or',
+                ),
+                ElevatedButton(
+                  style: ButtonStyle(
+                    backgroundColor:
+                        MaterialStateProperty.all<Color>(ColorConstants.black),
+                  ),
+                  onPressed: () {
+
+                    if (_pageController.hasClients) {
+                      _pageController.animateToPage(
+                        1,
+                        duration: const Duration(milliseconds: 400),
+                        curve: Curves.easeInOut,
+                      );
+                    }
+                  },
+                  child: const Text("Sign in with Password"),
+                ),
+              ],
+            ),
+          ),
+          Positioned(
+            bottom: 2,
+            left: 0,
+            right: 0,
+            child: Row(
+              mainAxisAlignment: MainAxisAlignment.center,
+              children: [
+                Text(
+                  "Don't have an account",
+                  style: Get.textTheme.labelLarge!
+                      .copyWith(color: ColorConstants.black),
+                ),
+                TextButton(
+                  onPressed: () {
+                    if (_pageController.hasClients) {
+                      _pageController.animateToPage(
+                        2,
+                        duration: const Duration(milliseconds: 400),
+                        curve: Curves.easeInOut,
+                      );
+                    }
+                  },
+                  child: Text(
+                    "Sign up",
+                    style: Get.textTheme.labelLarge!.copyWith(
+                        fontWeight: FontWeight.bold,
+                        color: ColorConstants.black),
+                  ),
+                )
+              ],
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+}
+
Index: assets/icons/facebook.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/icons/facebook.svg b/assets/icons/facebook.svg
new file mode 100644
--- /dev/null	(date 1721822011290)
+++ b/assets/icons/facebook.svg	(date 1721822011290)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 32 32"><path d="M21.164 5.074c-1.984 0-2.548.88-2.548 2.82v3.202h5.277l-.52 5.187h-4.758V32H12.3V16.282H8.04v-5.187h4.262V7.983C12.302 2.75 14.4 0 20.285 0c1.263 0 2.774.1 3.676.226v4.87" fill="#3c5a99"/></svg>
\ No newline at end of file
Index: assets/icons/google.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/icons/google.svg b/assets/icons/google.svg
new file mode 100644
--- /dev/null	(date 1721821972861)
+++ b/assets/icons/google.svg	(date 1721821972861)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 32 32" width="64" height="64"><defs><path id="A" d="M44.5 20H24v8.5h11.8C34.7 33.9 30.1 37 24 37c-7.2 0-13-5.8-13-13s5.8-13 13-13c3.1 0 5.9 1.1 8.1 2.9l6.4-6.4C34.6 4.1 29.6 2 24 2 11.8 2 2 11.8 2 24s9.8 22 22 22c11 0 21-8 21-22 0-1.3-.2-2.7-.5-4z"/></defs><clipPath id="B"><use xlink:href="#A"/></clipPath><g transform="matrix(.727273 0 0 .727273 -.954545 -1.45455)"><path d="M0 37V11l17 13z" clip-path="url(#B)" fill="#fbbc05"/><path d="M0 11l17 13 7-6.1L48 14V0H0z" clip-path="url(#B)" fill="#ea4335"/><path d="M0 37l30-23 7.9 1L48 0v48H0z" clip-path="url(#B)" fill="#34a853"/><path d="M48 48L17 24l-4-3 35-10z" clip-path="url(#B)" fill="#4285f4"/></g></svg>
\ No newline at end of file
Index: lib/pages/authentication/signin_page/signin_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/authentication/signin_page/signin_page.dart b/lib/pages/authentication/signin_page/signin_page.dart
new file mode 100644
--- /dev/null	(date 1722942290225)
+++ b/lib/pages/authentication/signin_page/signin_page.dart	(date 1722942290225)
@@ -0,0 +1,41 @@
+import 'package:flutter/material.dart';
+import 'package:hotel/extentions/extentions.dart';
+import '../../../widget/authentication_page/divider_with_text.dart';
+import '../../../widget/authentication_page/login_page/other_signin_list.dart';
+import '../../../widget/authentication_page/signin_page/signin_widget.dart';
+import '../../../widget/authentication_page/signin_page/signup_button_widget.dart';
+
+
+class SignInPage extends StatelessWidget {
+  const SignInPage({super.key, required this.pageController});
+  final PageController pageController;
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      body: SingleChildScrollView(
+        child: Column(
+          children: [
+            const SignInWidget(),
+            2.yh,
+            const DividerWithText(text: "or continue with"),
+            2.yh,
+            const OtherSignInList(),
+            2.yh,
+            Align(
+              alignment: Alignment.bottomCenter,
+              child: SignUpButtonWidget(pageController: pageController),
+            ),
+          ],
+        ),
+      ),
+    );
+  }
+}
+
+
+
+
+
+
+
Index: assets/icons/forgot_password.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/assets/icons/forgot_password.svg b/assets/icons/forgot_password.svg
new file mode 100644
--- /dev/null	(date 1721896484554)
+++ b/assets/icons/forgot_password.svg	(date 1721896484554)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
+<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
+<svg version="1.0" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
+	 width="800px" height="800px" viewBox="0 0 64 64" enable-background="new 0 0 64 64" xml:space="preserve">
+<g>
+	<path fill="#45AAB8" d="M20,14c0-6.627,5.373-12,12-12s12,5.373,12,12v10h-4V14c0-4.418-3.582-8-8-8s-8,3.582-8,8v10h-4V14z"/>
+	<g>
+		<path fill="#F9EBB2" d="M10,60c0,1.104,0.896,2,2,2h40c1.104,0,2-0.896,2-2v-4H10V60z"/>
+		<rect x="10" y="34" fill="#F9EBB2" width="44" height="20"/>
+		<path fill="#F9EBB2" d="M52,26H12c-1.104,0-2,0.895-2,2v4h44v-4C54,26.895,53.104,26,52,26z"/>
+	</g>
+	<g>
+		<path fill="#394240" d="M52,24h-6V14c0-7.732-6.268-14-14-14S18,6.268,18,14v10h-6c-2.211,0-4,1.789-4,4v32c0,2.211,1.789,4,4,4
+			h40c2.211,0,4-1.789,4-4V28C56,25.789,54.211,24,52,24z M20,14c0-6.627,5.373-12,12-12s12,5.373,12,12v10h-4V14
+			c0-4.418-3.582-8-8-8s-8,3.582-8,8v10h-4V14z M38,14v10H26V14c0-3.314,2.687-6,6-6S38,10.686,38,14z M54,60c0,1.104-0.896,2-2,2
+			H12c-1.104,0-2-0.896-2-2v-4h44V60z M54,54H10V34h44V54z M54,32H10v-4c0-1.105,0.896-2,2-2h40c1.104,0,2,0.895,2,2V32z"/>
+		<path fill="#394240" d="M29,44.979V49c0,1.656,1.343,3,3,3s3-1.344,3-3v-4.021c1.209-0.912,2-2.348,2-3.979c0-2.762-2.238-5-5-5
+			s-5,2.238-5,5C27,42.631,27.791,44.066,29,44.979z M32,38c1.657,0,3,1.342,3,3c0,1.305-0.837,2.402-2,2.816V49
+			c0,0.553-0.447,1-1,1s-1-0.447-1-1v-5.184c-1.163-0.414-2-1.512-2-2.816C29,39.342,30.343,38,32,38z"/>
+	</g>
+	<path fill="#506C7F" d="M32,38c1.657,0,3,1.342,3,3c0,1.305-0.837,2.402-2,2.816V49c0,0.553-0.447,1-1,1s-1-0.447-1-1v-5.184
+		c-1.163-0.414-2-1.512-2-2.816C29,39.342,30.343,38,32,38z"/>
+	<g opacity="0.15">
+		<path d="M10,60c0,1.104,0.896,2,2,2h40c1.104,0,2-0.896,2-2v-4H10V60z"/>
+		<path d="M52,26H12c-1.104,0-2,0.895-2,2v4h44v-4C54,26.895,53.104,26,52,26z"/>
+	</g>
+</g>
+</svg>
\ No newline at end of file
Index: assets/icons/verification.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/assets/icons/verification.svg b/assets/icons/verification.svg
new file mode 100644
--- /dev/null	(date 1722512035410)
+++ b/assets/icons/verification.svg	(date 1722512035410)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="iso-8859-1"?>
+<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
+<svg fill="#000000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
+	 width="800px" height="800px" viewBox="0 0 536.541 536.541"
+	 xml:space="preserve">
+<g>
+	<g>
+		<path d="M496.785,152.779c-3.305-25.085-16.549-51.934-38.826-74.205c-22.264-22.265-49.107-35.508-74.186-38.813
+			c-11.348-1.499-26.5-7.766-35.582-14.737C328.111,9.626,299.764,0,268.27,0s-59.841,9.626-79.921,25.024
+			c-9.082,6.965-24.235,13.238-35.582,14.737c-25.08,3.305-51.922,16.549-74.187,38.813c-22.277,22.271-35.521,49.119-38.825,74.205
+			c-1.493,11.347-7.766,26.494-14.731,35.57C9.621,208.422,0,236.776,0,268.27s9.621,59.847,25.024,79.921
+			c6.971,9.082,13.238,24.223,14.731,35.568c3.305,25.086,16.548,51.936,38.825,74.205c22.265,22.266,49.107,35.51,74.187,38.814
+			c11.347,1.498,26.5,7.771,35.582,14.736c20.073,15.398,48.421,25.025,79.921,25.025s59.841-9.627,79.921-25.025
+			c9.082-6.965,24.234-13.238,35.582-14.736c25.078-3.305,51.922-16.549,74.186-38.814c22.277-22.27,35.521-49.119,38.826-74.205
+			c1.492-11.346,7.766-26.492,14.73-35.568c15.404-20.074,25.025-48.422,25.025-79.921c0-31.494-9.621-59.848-25.025-79.921
+			C504.545,179.273,498.277,164.126,496.785,152.779z M439.256,180.43L246.477,373.209l-30.845,30.846
+			c-8.519,8.52-22.326,8.52-30.845,0l-30.845-30.846l-56.665-56.658c-8.519-8.52-8.519-22.326,0-30.846l30.845-30.844
+			c8.519-8.519,22.326-8.519,30.845,0l41.237,41.236L377.561,118.74c8.52-8.519,22.326-8.519,30.846,0l30.844,30.845
+			C447.775,158.104,447.775,171.917,439.256,180.43z"/>
+	</g>
+</g>
+</svg>
\ No newline at end of file
Index: lib/pages/authentication/signup_page/signup_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/authentication/signup_page/signup_page.dart b/lib/pages/authentication/signup_page/signup_page.dart
new file mode 100644
--- /dev/null	(date 1722942290199)
+++ b/lib/pages/authentication/signup_page/signup_page.dart	(date 1722942290199)
@@ -0,0 +1,32 @@
+import 'package:flutter/material.dart';
+import 'package:hotel/extentions/extentions.dart';
+import '../../../widget/authentication_page/signup_page/signin_button_widget.dart';
+import '../../../widget/authentication_page/signup_page/signup_widget.dart';
+
+class SignUpPage extends StatelessWidget {
+  const SignUpPage({super.key, required this.pageController});
+
+  final PageController pageController;
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      body: SingleChildScrollView(
+        child: Column(
+          mainAxisSize: MainAxisSize.max,
+          children: [
+            const SignUpWidget(),
+            2.yh,
+            Align(
+              alignment: Alignment.bottomCenter,
+              child: SignInButtonWidget(
+                  pageController: pageController),
+            ),
+          ],
+        ),
+      ),
+    );
+  }
+}
+
+
Index: lib/pages/authentication/forgot_password/new_password/new_password.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/authentication/forgot_password/new_password/new_password.dart b/lib/pages/authentication/forgot_password/new_password/new_password.dart
new file mode 100644
--- /dev/null	(date 1722941993036)
+++ b/lib/pages/authentication/forgot_password/new_password/new_password.dart	(date 1722941993036)
@@ -0,0 +1,75 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_svg_provider/flutter_svg_provider.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+import '../../../../controller/text_controller/text_controller.dart';
+import '../../../../core/color.dart';
+import '../../../../core/icon.dart';
+import '../../../../core/static_assets.dart';
+import '../../../../widget/alert_dialog/show_alert.dart';
+import '../../../../widget/authentication_page/text_field/special_field.dart';
+
+class CreateNewPassword extends StatelessWidget {
+  const CreateNewPassword({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+        iconTheme: IconThemeData(color: ColorConstants.black),
+        title: Text(
+          "Forgot Password",
+          style:
+              Get.textTheme.bodyMedium!.copyWith(color: ColorConstants.black),
+        ),
+      ),
+      body: SingleChildScrollView(
+        child: Padding(
+          padding: 16.pAll,
+          child: Column(
+            crossAxisAlignment: CrossAxisAlignment.stretch,
+            children: [
+              Image(
+                image: Svg(StaticAssets.verification),
+                height: 40.h,
+              ),
+              4.yh,
+              Text(
+                "Create New Password",
+                textAlign: TextAlign.start,
+                style: Get.textTheme.labelLarge!
+                    .copyWith(color: ColorConstants.black),
+              ),
+              4.yh,
+              SpecialField(
+                obscureText: false,
+                controller: TextControllers().fPasswordController,
+                hintText: "Password",
+                prefix: StaticIcons.password,
+                suffix: StaticIcons.password,
+                keyboardType: TextInputType.text,
+              ),
+              4.yh,
+              SpecialField(
+                obscureText: false,
+                controller: TextControllers().refPasswordController,
+                hintText: "Password",
+                prefix: StaticIcons.password,
+                suffix: StaticIcons.password,
+                keyboardType: TextInputType.text,
+              ),
+              4.yh,
+              ElevatedButton(
+                  style: ButtonStyle(
+                    backgroundColor:
+                        MaterialStateProperty.all<Color>(ColorConstants.black),
+                  ),
+                  onPressed: () => ShowAlert().buildShowDialog(context),
+                  child: Text("Continue", style: Get.textTheme.labelLarge))
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/authentication/forgot_password/verification/verification_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/authentication/forgot_password/verification/verification_page.dart b/lib/pages/authentication/forgot_password/verification/verification_page.dart
new file mode 100644
--- /dev/null	(date 1722942290233)
+++ b/lib/pages/authentication/forgot_password/verification/verification_page.dart	(date 1722942290233)
@@ -0,0 +1,101 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+
+import '../../../../core/color.dart';
+import '../new_password/new_password.dart';
+
+
+class VerificationPage extends StatefulWidget {
+  const VerificationPage({super.key, required this.cmInfo});
+  final String cmInfo;
+  @override
+  State<VerificationPage> createState() => _VerificationPageState();
+}
+
+class _VerificationPageState extends State<VerificationPage> {
+  final List<TextEditingController> _controllers = List.generate(4, (_) => TextEditingController());
+
+
+  @override
+  void dispose() {
+    for (var controller in _controllers) {
+      controller.dispose();
+    }
+    super.dispose();
+  }
+
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+        iconTheme: IconThemeData(color: ColorConstants.black),
+        title: Text(
+          "Forgot Password",
+          style: Get.textTheme.bodyMedium!.copyWith(color: ColorConstants.black),
+        ),
+      ),
+      body: Center(
+        child: Column(
+          mainAxisAlignment: MainAxisAlignment.center,
+          children: [
+            RichText(
+              textAlign: TextAlign.center,
+              text: TextSpan(
+                style: Get.textTheme.labelLarge!.copyWith(color: ColorConstants.black),
+                children: [
+                  const TextSpan(text: "Code has been sent to "),
+                  TextSpan(
+                    text: widget.cmInfo,
+                    style: Get.textTheme.labelLarge!.copyWith(
+                        color: ColorConstants.black,
+                        fontWeight: FontWeight.bold,),
+                  ),
+                ],
+              ),
+            ),
+            4.yh,
+            Row(
+              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
+              children: List.generate(4, (index) {
+                return SizedBox(
+                  width: 20.w,
+                  height: 20.w,
+                  child: TextField(
+                    controller: _controllers[index],
+                    keyboardType: TextInputType.number,
+                    textAlign: TextAlign.center,
+                    maxLength: 1,
+                    style: Get.textTheme.labelLarge!.copyWith(color: ColorConstants.black),
+                    decoration: InputDecoration(
+                      counterText: '',
+                      enabledBorder: OutlineInputBorder(
+                        borderRadius: BorderRadius.circular(10),
+                        borderSide: BorderSide(color: ColorConstants.black, width: 2.0),
+                      ),
+                      focusedBorder: OutlineInputBorder(
+                        borderRadius: BorderRadius.circular(10),
+                        borderSide: BorderSide(color: ColorConstants.green, width: 2.0),
+                      ),
+                    ),
+                    onChanged: (value) {
+                      if (value.length == 1 && index < 3) {
+                        FocusScope.of(context).nextFocus();
+                      } else if (value.isEmpty && index > 0) {
+                        FocusScope.of(context).previousFocus();
+                      }
+                    },
+                    onSubmitted: (value){
+                      Navigator.push(context, MaterialPageRoute(builder: (context) => const CreateNewPassword(),));
+                    },
+                  ),
+                );
+              }),
+            ),
+          ],
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/authentication/forgot_password/forgot_password/forgot_password.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/authentication/forgot_password/forgot_password/forgot_password.dart b/lib/pages/authentication/forgot_password/forgot_password/forgot_password.dart
new file mode 100644
--- /dev/null	(date 1722510100815)
+++ b/lib/pages/authentication/forgot_password/forgot_password/forgot_password.dart	(date 1722510100815)
@@ -0,0 +1,47 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import '../../../../core/color.dart';
+import '../../../../widget/authentication_page/forgot_password/forgot_details.dart';
+import '../../../../widget/authentication_page/forgot_password/forgot_option.dart';
+import '../../../../widget/authentication_page/forgot_password/sms_mail_sender.dart';
+
+class ForgotPassword extends StatefulWidget {
+  const ForgotPassword({super.key});
+
+  @override
+  State<ForgotPassword> createState() => _ForgotPasswordState();
+}
+
+class _ForgotPasswordState extends State<ForgotPassword> {
+  bool isSelect = false;
+  bool option = false; // SMS: true, Email: false
+
+  void _selectOption(bool option) {
+    setState(() {
+      isSelect = true;
+      this.option = option;
+    });
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(
+        iconTheme: IconThemeData(color: ColorConstants.black),
+        title: Text(
+          "Forgot Password",
+          style: Get.textTheme.bodyMedium!.copyWith(color: ColorConstants.black),
+        ),
+      ),
+      body: ListView(
+        children: [
+          const ForgotDetails(),
+          isSelect ? SendToMailAndSms(option: option) : ForgotOption(onSelectOption: _selectOption),
+        ],
+      ),
+    );
+  }
+}
+
+
+
Index: lib/pages/authentication/authentication_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/authentication/authentication_page.dart b/lib/pages/authentication/authentication_page.dart
new file mode 100644
--- /dev/null	(date 1722942290193)
+++ b/lib/pages/authentication/authentication_page.dart	(date 1722942290193)
@@ -0,0 +1,66 @@
+import 'package:flutter/material.dart';
+import 'package:hotel/pages/authentication/signin_page/signin_page.dart';
+import 'package:hotel/pages/authentication/signup_page/signup_page.dart';
+import '../../core/color.dart';
+import 'login_page/login_page.dart';
+
+class AuthenticationPage extends StatefulWidget {
+  const AuthenticationPage({super.key});
+
+  @override
+  State<AuthenticationPage> createState() => _AuthenticationPageState();
+}
+
+class _AuthenticationPageState extends State<AuthenticationPage> {
+  final PageController _pageController = PageController();
+
+  @override
+
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(iconTheme: IconThemeData(color: ColorConstants.black),),
+      body: PageView(
+        physics: const NeverScrollableScrollPhysics(),
+        controller: _pageController,
+        children: [
+          LoginPage(pageController: _pageController,),
+          SignInPage(pageController: _pageController,),
+          SignUpPage(pageController: _pageController,),
+          NewWidget(pageController: _pageController),
+        ],
+      ),
+    );
+  }
+}
+
+class NewWidget extends StatelessWidget {
+  const NewWidget({
+    super.key,
+    required PageController pageController,
+  }) : _pageController = pageController;
+
+  final PageController _pageController;
+
+  @override
+  Widget build(BuildContext context) {
+    return ColoredBox(
+      color: Colors.red,
+      child: Center(
+        child: ElevatedButton(
+          onPressed: () {
+            if (_pageController.hasClients) {
+              _pageController.animateToPage(
+                1,
+                duration: const Duration(milliseconds: 400),
+                curve: Curves.easeInOut,
+              );
+            }
+          },
+          child: const Text('Next'),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/onboarding_page/slider.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding_page/slider.dart b/lib/pages/onboarding_page/slider.dart
new file mode 100644
--- /dev/null	(date 1722431130766)
+++ b/lib/pages/onboarding_page/slider.dart	(date 1722431130766)
@@ -0,0 +1,49 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_onboarding_slider/flutter_onboarding_slider.dart';
+
+class OnBoarding extends StatelessWidget {
+  const OnBoarding({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    return OnBoardingSlider(
+        headerBackgroundColor: Colors.white,
+        finishButtonText: 'Register',
+        finishButtonStyle: const FinishButtonStyle(
+          backgroundColor: Colors.black,
+        ),
+        skipTextButton: const Text('Skip'),
+        trailing: const Text('Login'),
+        background: [
+          Image.asset('assets/images/sunset.jpg'),
+          Image.asset('assets/images/sunsett.jpg'),
+        ],
+        totalPage: 2,
+        speed: 1.8,
+        pageBodies: [
+          Container(
+            padding: const EdgeInsets.symmetric(horizontal: 40),
+            child: const Column(
+              children: <Widget>[
+                SizedBox(
+                  height: 480,
+                ),
+                Text('Description Text 1'),
+              ],
+            ),
+          ),
+          Container(
+            padding: const EdgeInsets.symmetric(horizontal: 40),
+            child: const Column(
+              children: <Widget>[
+                SizedBox(
+                  height: 480,
+                ),
+                Text('Description Text 2'),
+              ],
+            ),
+          ),
+        ],
+      );
+  }
+}
\ No newline at end of file
Index: lib/pages/onboarding_page/onboarding_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding_page/onboarding_page.dart b/lib/pages/onboarding_page/onboarding_page.dart
new file mode 100644
--- /dev/null	(date 1722942290209)
+++ b/lib/pages/onboarding_page/onboarding_page.dart	(date 1722942290209)
@@ -0,0 +1,151 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import 'package:hotel/extentions/extentions.dart';
+import '../../core/color.dart';
+import '../../widget/onboarding_page/custom_clipper.dart';
+import '../../widget/onboarding_page/page_list_controller.dart';
+import '../authentication/authentication_page.dart';
+
+class OnboardingPage extends StatefulWidget {
+  const OnboardingPage({super.key});
+
+  @override
+  State<OnboardingPage> createState() => _OnboardingPageState();
+}
+
+class _OnboardingPageState extends State<OnboardingPage> {
+  int currentIndex = 0;
+  PageController _controller=PageController();
+
+  @override
+  void initState() {
+    _controller = PageController(initialPage: 0);
+    super.initState();
+  }
+
+  @override
+  void dispose() {
+    _controller.dispose();
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      body: PageView.builder(
+        controller: _controller,
+        itemCount: OnboardingList().onboardingList.length,
+        onPageChanged: (int index) {
+          setState(() {
+            currentIndex = index;
+          });
+        },
+        itemBuilder: (context, index) => Stack(children: [
+          Positioned(
+            top: 0,
+            right: 0,
+            left: 0,
+            child: ClipPath(
+              clipper: CustomShapeClipper(),
+              child: SizedBox(
+                width: 100.w,
+                height: 100.w,
+                child: Image.asset(
+                  OnboardingList().onboardingList[currentIndex].imageAsset,
+                  fit: BoxFit.cover,
+                ),
+              ),
+            ),
+          ),
+          Positioned(
+            top: 100.w * 0.55,
+            left: 16,
+            child: Text(
+              OnboardingList().onboardingList[currentIndex].trailerText,
+              style: Get.textTheme.titleMedium!.copyWith(
+                color: Colors.black,
+                fontWeight: FontWeight.bold,
+                height:
+                    1.1, // Bu değer satır yüksekliğini belirler. Daha küçük bir değer boşluğu azaltır
+              ),
+            ),
+          ),
+          Positioned(
+            bottom: 4,
+            right: 16,
+            left: 16,
+            child: Column(
+              crossAxisAlignment: CrossAxisAlignment.stretch,
+              children: [
+                Text(
+                  OnboardingList().onboardingList[currentIndex].contentText,
+                  style: Get.textTheme.labelSmall!
+                      .copyWith(color: ColorConstants.black),
+                  softWrap: true,
+                  maxLines: null,
+                ),
+                4.yh,
+                Row(
+                  mainAxisAlignment: MainAxisAlignment.center,
+                  children: List.generate(
+                    OnboardingList().onboardingList.length,
+                    (index) => pageRange(index, context),
+                  ),
+                ),
+                ElevatedButton(
+                  onPressed: () {
+                   if(currentIndex==OnboardingList().onboardingList.length-1){
+                     Navigator.push(context, MaterialPageRoute(builder: (context) => const AuthenticationPage() ));
+                   }
+                   _controller.nextPage(
+                     duration: const Duration(milliseconds: 100),
+                     curve: Curves.bounceIn,
+                   );
+                  },
+                  style: ButtonStyle(
+                    backgroundColor:
+                        MaterialStateProperty.all<Color>(ColorConstants.black),
+                  ),
+                  child: Text(
+                      "Next",
+                      style: Get.textTheme.labelMedium),
+                ),
+                2.yh,
+                ElevatedButton(
+                  onPressed: () {
+                    Navigator.push(context, MaterialPageRoute(builder: (context) => const AuthenticationPage() ));
+                  },
+                  style: ButtonStyle(
+                    backgroundColor:
+                        MaterialStateProperty.all<Color>(ColorConstants.grey),
+                  ),
+                  child: Text(
+                    "Skip",
+                    style: Get.textTheme.labelMedium,
+                  ),
+                ),
+              ],
+            ),
+          ),
+        ]),
+      ),
+    );
+  }
+
+  pageRange(int index, BuildContext context) {
+    return GestureDetector(
+      onTap: (){
+        setState(() {
+          currentIndex=index;
+        });
+      },
+      child: Container(
+        height: 10,
+        width: currentIndex == index ? 25 : 10,
+        margin: 5.pAll,
+        decoration: BoxDecoration(
+            borderRadius: BorderRadius.circular(20), color: ColorConstants.black),
+      ),
+    );
+  }
+}
Index: lib/service/auth.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/service/auth.dart b/lib/service/auth.dart
new file mode 100644
--- /dev/null	(date 1722953136711)
+++ b/lib/service/auth.dart	(date 1722953136711)
@@ -0,0 +1,36 @@
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:get/get.dart';
+import '../model/user_model.dart';
+
+class AuthorizationService extends GetxController{
+  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;
+  var activeUserId = ''.obs;
+
+  UserModel? _createUser(User? user) {
+    return user == null ? null : UserModel.tofirebase(user);
+  }
+  Future<UserModel?> createUser(
+      String email, String password) async {
+    var userCredentials = await _firebaseAuth.createUserWithEmailAndPassword(email: email, password: password);
+    return _createUser(userCredentials.user);
+  }
+
+  Stream<UserModel?> get authStatus {
+    return _firebaseAuth.authStateChanges().map(_createUser);
+  }
+
+
+  Future<UserModel?> signIn (String email, String password) async {
+    var userCredentials = await _firebaseAuth.signInWithEmailAndPassword(email: email, password: password);
+    activeUserId.value=userCredentials.user!.uid;
+    return _createUser(userCredentials.user);
+  }
+
+  Future<void> signOut(){
+    return _firebaseAuth.signOut();
+  }
+
+  Future<void> passwordReset(String email) async {
+    await _firebaseAuth.sendPasswordResetEmail(email: email);
+  }
+}
\ No newline at end of file
Index: lib/service/firestore_service.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/service/firestore_service.dart b/lib/service/firestore_service.dart
new file mode 100644
--- /dev/null	(date 1722945636913)
+++ b/lib/service/firestore_service.dart	(date 1722945636913)
@@ -0,0 +1,89 @@
+import 'dart:async';
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:get/get.dart';
+
+
+import '../model/otel_model.dart';
+import '../model/user_model.dart';
+
+class FireStoreService extends GetxController {
+  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
+
+  Future<void> saveUser(
+      {id, email, userName, photoUrl = "", phoneNumber=""}) async {
+    await _firestore.collection("users").doc(id).set({
+      "fullName": userName,
+      "email": email,
+      "photoUrl": photoUrl,
+      "phoneNumber": phoneNumber,
+    });
+  }
+
+  Future<UserModel?> getUser(userId) async {
+    DocumentSnapshot docUser =
+        await _firestore.collection("users").doc(userId).get();
+    if (docUser.exists) {
+      UserModel user = UserModel.todocument(docUser);
+      return user;
+    }
+    return null;
+  }
+
+  void updateUser(
+      {required String? userId,
+      required String userName,
+      required String photoUrl,
+      required String content}) {
+    _firestore.collection("users").doc(userId).update({
+      "kullaniciAdi": userName,
+      "fotoUrl": photoUrl,
+      "hakkinda": content,
+    });
+  }
+
+  Future<List<UserModel>> searchUser(String text) async {
+    QuerySnapshot snapshot = await _firestore
+        .collection("otels")
+        .where("kullaniciAdi", isGreaterThanOrEqualTo: text)
+        .get();
+    List<UserModel> users =
+        snapshot.docs.map((doc) => UserModel.todocument(doc)).toList();
+    return users;
+  }
+
+  Future<List<HotelModel>> getAllHotel() async {
+    List<HotelModel> hotels = [];
+
+    try {
+      QuerySnapshot querySnapshot = await FirebaseFirestore.instance.collection('hotels').get();
+
+      for (var doc in querySnapshot.docs) {
+        var data = doc.data() as Map<String, dynamic>;
+        hotels.add(HotelModel.fromMap(data));
+      }
+    } catch (e) {
+      print("Error fetching hotels: $e");
+    }
+    return hotels;
+  }
+
+  Future<List<HotelModel>> fetchHotels() async {
+    try {
+      QuerySnapshot snapshot = await _firestore.collection('hotels').get();
+      List<HotelModel> hotels = snapshot.docs.map((doc) {
+        return HotelModel.fromFirestore(doc);
+      }).toList();
+      return hotels;
+    } catch (e) {
+      print("Error fetching hotels: $e");
+      return [];
+    }
+  }
+
+  Future<List<HotelModel>> getHotelList() async {
+    QuerySnapshot snapshot = await _firestore.collection("hotels").get();
+    List<HotelModel> hotels = snapshot.docs.map((doc) => HotelModel.fromFirestore(doc)).toList();
+    return hotels;
+  }
+}
Index: lib/widget/home_page/name.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/home_page/name.dart b/lib/widget/home_page/name.dart
new file mode 100644
--- /dev/null	(date 1722942694624)
+++ b/lib/widget/home_page/name.dart	(date 1722942694624)
@@ -0,0 +1,19 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import '../../const/const.dart';
+import '../../core/color.dart';
+
+class HomePageName extends StatelessWidget {
+  const HomePageName({
+    super.key,
+  });
+
+  @override
+  Widget build(BuildContext context) {
+    return Text(
+      Const().geciciAd,
+      style: Get.textTheme.bodyMedium!
+          .copyWith(color: ColorConstants.green, fontFamily: "Ultra"),
+    );
+  }
+}
Index: lib/widget/home_page/search.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/widget/home_page/search.dart b/lib/widget/home_page/search.dart
new file mode 100644
--- /dev/null	(date 1722942694650)
+++ b/lib/widget/home_page/search.dart	(date 1722942694650)
@@ -0,0 +1,27 @@
+import 'package:flutter/material.dart';
+import 'package:get/get.dart';
+import '../../core/color.dart';
+
+class HomePageSearch extends StatelessWidget {
+  const HomePageSearch({
+    super.key,
+  });
+
+  @override
+  Widget build(BuildContext context) {
+    return TextField(
+      cursorColor: ColorConstants.green,
+      style: Get.textTheme.labelLarge!.copyWith(color: ColorConstants.black),
+      decoration: InputDecoration(
+          border: OutlineInputBorder(
+              borderRadius: BorderRadius.circular(50)),
+          hintText: "Search",
+          prefixIcon: Icon(Icons.search, size: 30,
+          color: ColorConstants.green),
+          suffixIcon: Icon(
+              (Icons.settings),color: ColorConstants.green),
+
+          ),
+      );
+  }
+}
\ No newline at end of file
